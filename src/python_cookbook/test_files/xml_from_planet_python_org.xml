<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planetpython.org/</link>
	<language>en</language>
	<description>Planet Python - http://planetpython.org/</description>

<item>
	<title>Erik Marsja: Variance Inflation Factor in Python: Ace Multicollinearity Easily</title>
	<guid>https://www.marsja.se/variance-inflation-factor-in-python-multicollinearity-for-regression/</guid>
	<link>https://www.marsja.se/variance-inflation-factor-in-python-multicollinearity-for-regression/</link>
	<description>&lt;p&gt;The post &lt;a href=&quot;https://www.marsja.se/variance-inflation-factor-in-python-multicollinearity-for-regression/&quot;&gt;Variance Inflation Factor in Python: Ace Multicollinearity Easily&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.marsja.se&quot;&gt;Erik Marsja&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we will learn an essential aspect of regression analysis – calculating the &lt;a href=&quot;https://online.stat.psu.edu/stat462/node/180/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;variance inflation factor&lt;/a&gt; in &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;. Multicollinearity, the phenomenon where predictor variables in a regression model are correlated, can majorly impact the reliability of results. We turn to the variance inflation factor, a powerful diagnostic tool to identify and address this issue. Detecting multicollinearity is pivotal for accurate regression models, and Python provides robust tools for this task. Let us explore the fundamentals of the variance inflation factor, understand its importance, and learn how to calculate it using Python.&lt;/p&gt;



&lt;span id=&quot;more-11085&quot;&gt;&lt;/span&gt;


&lt;h2 class=&quot;simpletoc-title&quot;&gt;Table of Contents&lt;/h2&gt;
&lt;ul class=&quot;simpletoc-list&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#outline&quot;&gt;Outline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#multicollinearity&quot;&gt;Multicollinearity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#variance-inflation-factor&quot;&gt;Variance Inflation Factor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#synthetic-data&quot;&gt;Synthetic Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#python-packages-to-calculate-variance-inflation-factor&quot;&gt;Python Packages to Calculate Variance Inflation Factor&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;
&lt;a href=&quot;https://www.marsja.se/category/python/feed/#statsmodels&quot;&gt;Statsmodels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#scikitlearn&quot;&gt;scikit-learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#variance-inflation-factor-in-python-with-statsmodels&quot;&gt;Variance Inflation Factor in Python with statsmodels&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;
&lt;a href=&quot;https://www.marsja.se/category/python/feed/#step-1-import-the-variance-inflation-factor-method&quot;&gt;Step 1: Import the Variance Inflation Factor Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#step-2-select-the-predictors-and-add-a-constant-term&quot;&gt;Step 2: Select the Predictors and Add a Constant Term&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#step-3-calculate-vif-in-python-with-statsmodels&quot;&gt;Step 3: Calculate VIF in Python with Statsmodels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#python-to-manually-calculate-the-variance-inflation-factor&quot;&gt;Python to Manually Calculate the Variance Inflation Factor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h2 class=&quot;wp-block-heading&quot; id=&quot;outline&quot;&gt;Outline&lt;/h2&gt;


&lt;p&gt;The structure of the post is as follows. First, before we learn Python to calculate variance inflation factor (VIF), we understand the intricacies of multicollinearity in regression analysis. Next, we explore the significance of VIF and introduce the concept of synthetic data to create scenarios of high multicollinearity. Moving forward, we investigate the Python packages, focusing on Statsmodels and scikit-learn.&lt;/p&gt;



&lt;p&gt;Within Statsmodels, we guide you through calculating VIF, beginning with importing the VIF method. In step two, we discuss the selection of predictors and the addition of a constant term. The final step unveils the actual computation of VIF in Python using Statsmodels.&lt;/p&gt;



&lt;p&gt;To provide a comprehensive understanding, we also explore the manual calculation of VIF using scikit-learn and linear regression. We conclude the post by summarizing key takeaways about multicollinearity and VIF, underlining their practical applications in Python for robust data analysis.&lt;/p&gt;


&lt;h2 class=&quot;wp-block-heading&quot; id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;


&lt;p&gt;Before we get into Python&amp;#8217;s implementation of Variance Inflation Factor (VIF) and multicollinearity, ensure you have a foundational understanding of regression analysis. Familiarity with predictor variables, response variables, and model building is crucial.&lt;/p&gt;



&lt;p&gt;Moreover, a basic knowledge of Python programming and data manipulation using libraries like Pandas will be beneficial. Ensure you are comfortable with tasks such as importing data, handling data frames, and performing fundamental statistical analyses in Python. If you still need to acquire these skills, consider using introductory Python for data analysis.&lt;/p&gt;



&lt;p&gt;Additionally, a conceptual understanding of multicollinearity—specifically, how correlated predictor variables can impact regression models—is essential. If these prerequisites are met, you are well-positioned to grasp the nuances of calculating VIF in Python and effectively address multicollinearity challenges in regression analysis.&lt;/p&gt;


&lt;h2 class=&quot;wp-block-heading&quot; id=&quot;multicollinearity&quot;&gt;Multicollinearity&lt;/h2&gt;


&lt;p&gt;In regression models, understanding multicollinearity is important for robust analyses. Multicollinearity occurs when independent variables in a regression model are highly correlated, posing challenges to accurate coefficient estimation and interpretation. This phenomenon introduces instability, making it difficult to discern the individual effect of each variable on the dependent variable. This, in turn, jeopardizes the reliability of statistical inferences drawn from the model.&lt;/p&gt;



&lt;p&gt;The consequences of multicollinearity ripple through the coefficients of the regression equation. When variables are highly correlated, isolating their distinct impacts on the dependent variable becomes problematic. Coefficients become inflated, and their standard errors soar, leading to imprecise estimates. This inflation in standard errors could mask the true significance of variables, impeding the validity of statistical tests.&lt;/p&gt;



&lt;p&gt;Multicollinearity distorts the precision of coefficient estimates and muddles the interpretation of their effects. It complicates understanding how changes in one variable relate to changes in the dependent variable, introducing ambiguity in the causal relationships between variables. Consequently, addressing multicollinearity is crucial for untangling these intricacies and ensuring the reliability of regression analyses.&lt;/p&gt;


&lt;h2 class=&quot;wp-block-heading&quot; id=&quot;variance-inflation-factor&quot;&gt;Variance Inflation Factor&lt;/h2&gt;


&lt;p&gt;Variance Inflation Factor (VIF) is a statistical metric that gauges the extent of multicollinearity among independent variables in a regression model. We can use it to quantify how much the variance of an estimated regression coefficient increases if predictors are correlated. This metric operates on the premise that collinear variables can inflate the variances of the regression coefficients, impeding the precision of the estimates. We can use the variance inflation factor to assess the severity of multicollinearity and identify problematic variables numerically.&lt;/p&gt;



&lt;p&gt;The importance of VIF lies in its ability to serve as a diagnostic tool for multicollinearity detection. By calculating the VIF for each independent variable, we gain insights into the degree of correlation among predictors. Higher VIF values indicate increased multicollinearity, signifying potential issues in the accuracy and stability of the regression model. Monitoring VIF values enables practitioners to pinpoint variables contributing to multicollinearity, facilitating targeted interventions.&lt;/p&gt;



&lt;p&gt;Interpreting VIF values involves considering their magnitudes concerning a predetermined threshold. Commonly, a VIF exceeding ten is indicative of substantial multicollinearity concerns&lt;sup class=&quot;fn&quot;&gt;&lt;a href=&quot;https://www.marsja.se/category/python/feed/#b84b0747-b857-4ed0-a397-944c2fb29c56&quot; id=&quot;b84b0747-b857-4ed0-a397-944c2fb29c56-link&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Values below this threshold suggest a more acceptable level of independence among predictors. Understanding and applying these threshold values is instrumental in making informed decisions about retaining, modifying, or eliminating specific variables in the regression model.&lt;/p&gt;


&lt;h2 class=&quot;wp-block-heading&quot; id=&quot;synthetic-data&quot;&gt;Synthetic Data&lt;/h2&gt;

&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;span&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np

&lt;span class=&quot;hljs-comment&quot;&gt;# Set a random seed for reproducibility&lt;/span&gt;
np.random.seed(&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;)

&lt;span class=&quot;hljs-comment&quot;&gt;# Generate a dataset with three predictors&lt;/span&gt;
data = pd.DataFrame({
    &lt;span class=&quot;hljs-string&quot;&gt;'Predictor1'&lt;/span&gt;: np.random.rand(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;),
    &lt;span class=&quot;hljs-string&quot;&gt;'Predictor2'&lt;/span&gt;: np.random.rand(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;),
    &lt;span class=&quot;hljs-string&quot;&gt;'Predictor3'&lt;/span&gt;: np.random.rand(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)
})

&lt;span class=&quot;hljs-comment&quot;&gt;# Create strong correlation between Predictor1 and Predictor2&lt;/span&gt;
data&amp;#91;&lt;span class=&quot;hljs-string&quot;&gt;'Predictor2'&lt;/span&gt;] = data&amp;#91;&lt;span class=&quot;hljs-string&quot;&gt;'Predictor1'&lt;/span&gt;] + np.random.normal(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;, size=&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/span&gt;&lt;small class=&quot;shcb-language&quot; id=&quot;shcb-language-1&quot;&gt;&lt;span class=&quot;shcb-language__label&quot;&gt;Code language:&lt;/span&gt; &lt;span class=&quot;shcb-language__name&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;shcb-language__paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;shcb-language__slug&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;shcb-language__paren&quot;&gt;)&lt;/span&gt;&lt;/small&gt;&lt;/pre&gt;

&lt;h2 class=&quot;wp-block-heading&quot; id=&quot;python-packages-to-calculate-variance-inflation-factor&quot;&gt;Python Packages to Calculate Variance Inflation Factor&lt;/h2&gt;


&lt;p&gt;Several Python libraries offer convenient tools for calculating Variance Inflation Factor (VIF) in the context of regression models. Two prominent libraries, statsmodels and scikit-learn, provide functions that streamline assessing multicollinearity.&lt;/p&gt;


&lt;h3 class=&quot;wp-block-heading&quot; id=&quot;statsmodels&quot;&gt;Statsmodels&lt;/h3&gt;


&lt;p&gt;Statsmodels is a comprehensive library for estimating and analyzing statistical models. It features a dedicated function, often used in regression analysis, named variance_inflation_factor. This function enables users to compute VIF for each variable in a dataset, revealing insights into the presence and severity of multicollinearity. Statsmodels, as a whole, is widely employed for detailed statistical analyses, making it a versatile choice for researchers and analysts.&lt;/p&gt;


&lt;h3 class=&quot;wp-block-heading&quot; id=&quot;scikitlearn&quot;&gt;scikit-learn&lt;/h3&gt;


&lt;p&gt;On the other hand, scikit-learn, a prominent machine learning library, has modules extending beyond conventional machine learning tasks. While scikit-learn does not have a direct function for VIF calculation, its flexibility allows users to employ alternative approaches. For instance, one can manually leverage the LinearRegression class to fit a model and calculate VIF. Scikit-learn&amp;#8217;s strength lies in its extensive capabilities for machine learning applications, making it a valuable tool for data scientists engaged in diverse projects.&lt;/p&gt;


&lt;h2 class=&quot;wp-block-heading&quot; id=&quot;variance-inflation-factor-in-python-with-statsmodels&quot;&gt;Variance Inflation Factor in Python with statsmodels&lt;/h2&gt;


&lt;p&gt;In this example, we will delve into the practical process of calculating Variance Inflation Factor (VIF) using the statsmodels library in Python. VIF is a crucial metric for assessing multicollinearity, and statsmodels provides a dedicated function, variance_inflation_factor, to streamline this calculation.&lt;/p&gt;



&lt;p&gt;First, ensure you have the necessary libraries installed by using:&lt;/p&gt;


&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;span&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;pip install pandas statsmodels
&lt;/code&gt;&lt;/span&gt;&lt;small class=&quot;shcb-language&quot; id=&quot;shcb-language-2&quot;&gt;&lt;span class=&quot;shcb-language__label&quot;&gt;Code language:&lt;/span&gt; &lt;span class=&quot;shcb-language__name&quot;&gt;Bash&lt;/span&gt; &lt;span class=&quot;shcb-language__paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;shcb-language__slug&quot;&gt;bash&lt;/span&gt;&lt;span class=&quot;shcb-language__paren&quot;&gt;)&lt;/span&gt;&lt;/small&gt;&lt;/pre&gt;

&lt;h3 class=&quot;wp-block-heading&quot; id=&quot;step-1-import-the-variance-inflation-factor-method&quot;&gt;Step 1: Import the Variance Inflation Factor Method&lt;/h3&gt;


&lt;p&gt;Now, let us consider a scenario with a dataset with multiple independent variables, such as in the synthetic data we previously generated. First, we start by loading the required methods:&lt;/p&gt;


&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;span&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; statsmodels.stats.outliers_influence &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; variance_inflation_factor&lt;/code&gt;&lt;/span&gt;&lt;small class=&quot;shcb-language&quot; id=&quot;shcb-language-3&quot;&gt;&lt;span class=&quot;shcb-language__label&quot;&gt;Code language:&lt;/span&gt; &lt;span class=&quot;shcb-language__name&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;shcb-language__paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;shcb-language__slug&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;shcb-language__paren&quot;&gt;)&lt;/span&gt;&lt;/small&gt;&lt;/pre&gt;

&lt;h3 class=&quot;wp-block-heading&quot; id=&quot;step-2-select-the-predictors-and-add-a-constant-term&quot;&gt;Step 2: Select the Predictors and Add a Constant Term&lt;/h3&gt;


&lt;p&gt;Next, we will add a constant term to our independent variables, which is necessary for the VIF calculation in Python:&lt;/p&gt;


&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;span&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Specify your independent variables&lt;/span&gt;
X = data&amp;#91;&amp;#91;&lt;span class=&quot;hljs-string&quot;&gt;'Predictor1'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'Predictor2'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'Predictor3'&lt;/span&gt;]]

&lt;span class=&quot;hljs-comment&quot;&gt;# Add a constant&lt;/span&gt;
X = sm.add_constant(X)&lt;/code&gt;&lt;/span&gt;&lt;small class=&quot;shcb-language&quot; id=&quot;shcb-language-4&quot;&gt;&lt;span class=&quot;shcb-language__label&quot;&gt;Code language:&lt;/span&gt; &lt;span class=&quot;shcb-language__name&quot;&gt;PHP&lt;/span&gt; &lt;span class=&quot;shcb-language__paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;shcb-language__slug&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;shcb-language__paren&quot;&gt;)&lt;/span&gt;&lt;/small&gt;&lt;/pre&gt;


&lt;p&gt;In the code chunk above, we prepare the independent variables for calculating the Variance Inflation Factor (VIF) in Python, specifically using the Statsmodels library. First, we specify our independent variables, denoted as &amp;#8216;Predictor1&amp;#8217;, &amp;#8216;Predictor3&amp;#8217;, and &amp;#8216;Predictor4&amp;#8217;. To facilitate the VIF calculation, we add a constant term to the dataset using the &lt;code&gt;sm.add_constant()&lt;/code&gt; function from Statsmodels. This step is crucial for accurate VIF computation, ensuring the analysis considers the intercept term. The resulting dataset, now including the constant term, is ready for further analysis to assess multicollinearity among the independent variables.&lt;/p&gt;


&lt;h3 class=&quot;wp-block-heading&quot; id=&quot;step-3-calculate-vif-in-python-with-statsmodels&quot;&gt;Step 3: Calculate VIF in Python with Statsmodels&lt;/h3&gt;


&lt;p&gt;Now, it is time to use Python to calculate the VIF:&lt;/p&gt;


&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;span&gt;&lt;code class=&quot;hljs language-python&quot;&gt;vif_data = pd.DataFrame()
vif_data&amp;#91;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Variable&quot;&lt;/span&gt;] = X.columns
vif_data&amp;#91;&lt;span class=&quot;hljs-string&quot;&gt;&quot;VIF&quot;&lt;/span&gt;] = &amp;#91;variance_inflation_factor(X.values, i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(X.shape&amp;#91;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])]&lt;/code&gt;&lt;/span&gt;&lt;small class=&quot;shcb-language&quot; id=&quot;shcb-language-5&quot;&gt;&lt;span class=&quot;shcb-language__label&quot;&gt;Code language:&lt;/span&gt; &lt;span class=&quot;shcb-language__name&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;shcb-language__paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;shcb-language__slug&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;shcb-language__paren&quot;&gt;)&lt;/span&gt;&lt;/small&gt;&lt;/pre&gt;


&lt;p&gt;In the code chunk above, we use Pandas to create an empty DataFrame named &lt;code&gt;vif_data&lt;/code&gt; to store information about the Variance Inflation Factor (VIF) for each variable. We then populate this &lt;code&gt;DataFrame &lt;/code&gt;by adding columns for the variable names and their corresponding VIF values. The VIF calculation is performed using a list comprehension, iterating through the columns of the input dataset &lt;code&gt;X&lt;/code&gt; and applying the &lt;code&gt;variance_inflation_factor&lt;/code&gt; function. This function is part of the Statsmodels library and is employed to compute the VIF, a metric used to assess multicollinearity among predictor variables. The resulting vif_data DataFrame provides a comprehensive overview of the VIF values for each variable, aiding in the identification and interpretation of multicollinearity in the dataset. Herea the printed results:&lt;/p&gt;



&lt;a href=&quot;https://www.marsja.se/wp-content/uploads/2023/11/python_variance_inflation_factor.webp&quot;&gt;&lt;img width=&quot;428&quot; height=&quot;96&quot; src=&quot;https://www.marsja.se/wp-content/uploads/2023/11/python_variance_inflation_factor.webp&quot; alt=&quot;&quot; class=&quot;wp-image-11096&quot; /&gt;&lt;/a&gt;


&lt;h2 class=&quot;wp-block-heading&quot; id=&quot;python-to-manually-calculate-the-variance-inflation-factor&quot;&gt;Python to Manually Calculate the Variance Inflation Factor &lt;/h2&gt;


&lt;p&gt;In this section, we will use scikit-learn in Python to manually calculate the Variance Inflation Factor (VIF) by using linear regression. Here is how:&lt;/p&gt;


&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;span&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; LinearRegression

&lt;span class=&quot;hljs-comment&quot;&gt;# Function to calculate VIF&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calculate_vif&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data, target_col)&lt;/span&gt;:&lt;/span&gt;
    features = data.columns&amp;#91;data.columns != target_col]
    X = data&amp;#91;features]
    y = data&amp;#91;target_col]

    &lt;span class=&quot;hljs-comment&quot;&gt;# Fit linear regression model&lt;/span&gt;
    lin_reg = LinearRegression().fit(X, y)

    &lt;span class=&quot;hljs-comment&quot;&gt;# Calculate VIF&lt;/span&gt;
    vif = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; / (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - lin_reg.score(X, y))

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; vif

&lt;span class=&quot;hljs-comment&quot;&gt;# Calculate VIF for each predictor&lt;/span&gt;
vif_data = pd.DataFrame()
vif_data&amp;#91;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Variable&quot;&lt;/span&gt;] = X.columns
vif_data&amp;#91;&lt;span class=&quot;hljs-string&quot;&gt;&quot;VIF&quot;&lt;/span&gt;] = &amp;#91;calculate_vif(data, col) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; col &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; X.columns]

&lt;span class=&quot;hljs-comment&quot;&gt;# Display the VIF values&lt;/span&gt;
print(vif_data)&lt;/code&gt;&lt;/span&gt;&lt;small class=&quot;shcb-language&quot; id=&quot;shcb-language-6&quot;&gt;&lt;span class=&quot;shcb-language__label&quot;&gt;Code language:&lt;/span&gt; &lt;span class=&quot;shcb-language__name&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;shcb-language__paren&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;shcb-language__slug&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;shcb-language__paren&quot;&gt;)&lt;/span&gt;&lt;/small&gt;&lt;/pre&gt;


&lt;p&gt;In the code chunk above, we define a Python function to calculate the Variance Inflation Factor (VIF) using scikit-learn&amp;#8217;s Linear Regression. Moreover, the function takes a dataset and a target variable, fits a linear regression model, and computes the VIF for each predictor variable. Next, we store the results in a Pandas DataFrame, which is then printed to display the calculated VIF values for each predictor. This approach allows us to assess multicollinearity among variables in the dataset manually.&lt;/p&gt;



&lt;a href=&quot;https://www.marsja.se/wp-content/uploads/2023/11/VIF_calculated_in_Python.webp&quot;&gt;&lt;img width=&quot;303&quot; height=&quot;146&quot; src=&quot;https://www.marsja.se/wp-content/uploads/2023/11/VIF_calculated_in_Python.webp&quot; alt=&quot;variance inflation factor calculated with Python.&quot; class=&quot;wp-image-11098&quot; /&gt;&lt;/a&gt;


&lt;h2 class=&quot;wp-block-heading&quot; id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;


&lt;p&gt;In this post, you have learned about the critical concept of multicollinearity in regression analysis and how the Variance Inflation Factor (VIF) is a valuable metric to detect and address. Understanding the consequences of multicollinearity on regression models is crucial for reliable statistical inferences. We explored Python libraries, such as Statsmodels and scikit-learn, to calculate VIF efficiently.&lt;/p&gt;



&lt;p&gt;The practical examples illustrated applying these techniques to real-world datasets, emphasizing the importance of identifying and mitigating multicollinearity for accurate regression analysis. Whether you are working with Statsmodels, scikit-learn, or manual calculations, the goal is to enhance the reliability of your predictive models.&lt;/p&gt;



&lt;p&gt;As you apply these methods to your projects, share your insights and experiences in the comments below. Your feedback is valuable, and sharing this post on social media can help others in the data science community enhance their understanding of multicollinearity and its practical implications.&lt;/p&gt;


&lt;h2 class=&quot;wp-block-heading&quot; id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;


&lt;p&gt;Here are some tutorials you might find helpful:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/combine-year-and-month-columns-in-pandas/&quot;&gt;Combine Year and Month Columns in Pandas&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/coefficient-of-variation-in-python-with-pandas-numpy/&quot;&gt;Coefficient of Variation in Python with Pandas &amp;amp; NumPy&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/python-manova-made-easy-using-statsmodels/&quot;&gt;MANOVA in Python Made Easy using Statsmodels&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/wilcoxon-signed-rank-test-in-python/&quot;&gt;Wilcoxon Signed-Rank test in Python&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/how-to-use-pandas-get_dummies-to-create-dummy-variables-in-python/&quot;&gt;How to use Pandas get_dummies to Create Dummy Variables in Python&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://www.marsja.se/seaborn-confusion-matrix-how-to-plot-and-visualize-in-python/&quot;&gt;Seaborn Confusion Matrix: How to Plot and Visualize in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ol class=&quot;wp-block-footnotes&quot;&gt;&lt;li id=&quot;b84b0747-b857-4ed0-a397-944c2fb29c56&quot;&gt;&lt;a href=&quot;https://online.stat.psu.edu/stat462/node/180/&quot;&gt;10.7 &amp;#8211; Detecting Multicollinearity Using Variance Inflation Factors | STAT 462 (psu.edu)&lt;/a&gt; &lt;a href=&quot;https://www.marsja.se/category/python/feed/#b84b0747-b857-4ed0-a397-944c2fb29c56-link&quot;&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/21a9.png&quot; alt=&quot;↩&quot; class=&quot;wp-smiley&quot; /&gt;︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The post &lt;a href=&quot;https://www.marsja.se/variance-inflation-factor-in-python-multicollinearity-for-regression/&quot;&gt;Variance Inflation Factor in Python: Ace Multicollinearity Easily&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.marsja.se&quot;&gt;Erik Marsja&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Sat, 18 Nov 2023 19:37:25 +0000</pubDate>
</item>
<item>
	<title>John Cook: Factored random numbers</title>
	<guid>https://www.johndcook.com/blog/2023/11/17/factored-random-numbers/</guid>
	<link>https://www.johndcook.com/blog/2023/11/17/factored-random-numbers/</link>
	<description>&lt;p&gt;A couple days ago Michael Nielsen &lt;a href=&quot;https://twitter.com/michael_nielsen/status/1724854680990486780?s=20&quot;&gt;posted&lt;/a&gt; an image of a one-page paper that gives an algorithm for generating factored random numbers, uniformly distributed from 1 to some designated &lt;em&gt;N&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The algorithm does not generate random numbers then factor them. It&amp;#8217;s more efficient than that, generating the factorization along with the final result. It does require testing for whether a number is prime, but this is more efficient than factorization.&lt;/p&gt;
&lt;p&gt;I thought about trying to code up the algorithm in Python, but then I see that &lt;a href=&quot;https://twitter.com/iconjack/status/1725595270820274387?s=20&quot;&gt;@iconjack&lt;/a&gt; beat me to it.&lt;/p&gt;
&lt;pre&gt;
from sympy import isprime
from random import random, randint

def randfacts(N):
    while True:
        n, r, s = N, 1, []
        while n &gt; 1:
            if r &gt; N: break
            if isprime(n := randint(1,n)):
                r *= n
                s.append(n)
        else:
            if random()  r/N:
                return r, s
&lt;/pre&gt;The post &lt;a href=&quot;https://www.johndcook.com/blog/2023/11/17/factored-random-numbers/&quot;&gt;Factored random numbers&lt;/a&gt; first appeared on &lt;a href=&quot;https://www.johndcook.com/blog&quot;&gt;John D. Cook&lt;/a&gt;.</description>
	<pubDate>Sat, 18 Nov 2023 01:42:42 +0000</pubDate>
</item>
<item>
	<title>Pythonicity: Composition vs. inheritance</title>
	<guid>https://coady.github.io/posts/composition-vs-inheritance.html</guid>
	<link>https://coady.github.io/posts/composition-vs-inheritance.html</link>
	<description>&lt;h1&gt;Contrarian view on composition over inheritance.&lt;/h1&gt;
&lt;p&gt;The conventional wisdom is to prefer &lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;composition over inheritance&lt;/a&gt;. More specifically to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Delegation_pattern&quot;&gt;delegation&lt;/a&gt; over single inheritance.&lt;/p&gt;
&lt;p&gt;Like the recommendation on &lt;a href=&quot;https://coady.github.io/closing-files.html&quot;&gt;closing files&lt;/a&gt;, the advice is well-intentioned but omits the fact that Python does not support it well. Python has no mechanism for embedding or forwarding methods. And the despite its famous &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-duck-typing&quot;&gt;duck-typing&lt;/a&gt;, there are many cases where a type must be subclassed to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;substitutable&lt;/a&gt; (particularly if implemented in CPython).&lt;/p&gt;
&lt;p&gt;The below example comes from a popular &lt;a href=&quot;https://pycon.org&quot;&gt;PyCon&lt;/a&gt; talk called &lt;a href=&quot;https://www.youtube.com/watch?v=wf-BqAjZb8M&quot;&gt;Beyond PEP 8&lt;/a&gt;. The goal is &lt;a href=&quot;https://www.shawnxli.com/posts/beyond-pep-8/&quot;&gt;adapt a Java-esque interface&lt;/a&gt; into pythonic code.&lt;/p&gt;

&lt;h2 class=&quot;anchored&quot;&gt;Original implementation&lt;/h2&gt;
&lt;div class=&quot;cell&quot;&gt;
&lt;div class=&quot;sourceCode cell-code&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode python code-with-copy&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; jnettool.tools.elements.NetworkElement&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; jnettool.tools.Routing&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; jnettool.tools.RouteInsector&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;ne &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; jnettool.tools.elements.NetworkElement(&lt;span class=&quot;st&quot;&gt;'171.0.2.45'&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;    routing_table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ne.getRoutingTable()&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;span class=&quot;cf&quot;&gt;except&lt;/span&gt; jnettool.tools.elements.MissingVar:&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;    logging.exception(&lt;span class=&quot;st&quot;&gt;'No routing table found'&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;    ne.cleanup(&lt;span class=&quot;st&quot;&gt;'rollback'&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;    num_routes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; routing_table.getSize()&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; RToffset &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(num_routes):&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;        route &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; routing_table.getRouteByIndex(RToffset)&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;        name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; route.getName()&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;        ipaddr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; route.getIPAddr()&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%15s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; -&amp;gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; (name, ipaddr)&lt;/span&gt;
&lt;span id=&quot;cb1-19&quot;&gt;&lt;span class=&quot;cf&quot;&gt;finally&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb1-20&quot;&gt;    ne.cleanup(&lt;span class=&quot;st&quot;&gt;'commit'&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-21&quot;&gt;    ne.disconnect()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2 class=&quot;anchored&quot;&gt;Proposed interface&lt;/h2&gt;
&lt;div class=&quot;cell&quot;&gt;
&lt;div class=&quot;sourceCode cell-code&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode python code-with-copy&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; nettools &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; NetworkElement&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; NetworkElement(&lt;span class=&quot;st&quot;&gt;'171.0.2.45'&lt;/span&gt;) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; ne:&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; route &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; ne.routing_table:&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%15s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; -&amp;gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; (route.name, route.ipaddr)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2 class=&quot;anchored&quot;&gt;Proposed solution&lt;/h2&gt;
&lt;div class=&quot;cell&quot;&gt;
&lt;div class=&quot;sourceCode cell-code&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode python code-with-copy&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; jnetool.tools.elements.NetworkElement&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; jnetool.tools.Routing&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; NetworkElementError(&lt;span class=&quot;pp&quot;&gt;Exception&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; NetworkElement(&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, ipaddr):&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.ipaddr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ipaddr&lt;/span&gt;
&lt;span id=&quot;cb3-11&quot;&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.oldne &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; jnetool.tools.elements.NetworkElement(ipaddr)&lt;/span&gt;
&lt;span id=&quot;cb3-12&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-13&quot;&gt;    &lt;span class=&quot;at&quot;&gt;@property&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-14&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; routing_table(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb3-15&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb3-16&quot;&gt;            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; RoutingTable(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.oldne.getRoutingTable())&lt;/span&gt;
&lt;span id=&quot;cb3-17&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;except&lt;/span&gt; jnetool.tools.elements.MissingVar:&lt;/span&gt;
&lt;span id=&quot;cb3-18&quot;&gt;            &lt;span class=&quot;cf&quot;&gt;raise&lt;/span&gt; NetworkElementError(&lt;span class=&quot;st&quot;&gt;'No routing table found'&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-19&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-20&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__enter__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb3-21&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-22&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-23&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__exit__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, exctype, excinst, exctb):&lt;/span&gt;
&lt;span id=&quot;cb3-24&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; exctype &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; NetworkElementError:&lt;/span&gt;
&lt;span id=&quot;cb3-25&quot;&gt;            logging.exception(&lt;span class=&quot;st&quot;&gt;'No routing table found'&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-26&quot;&gt;            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.oldne.cleanup(&lt;span class=&quot;st&quot;&gt;'rollback'&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-27&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb3-28&quot;&gt;            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.oldne.cleanup(&lt;span class=&quot;st&quot;&gt;'commit'&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-29&quot;&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.oldne.disconnect()&lt;/span&gt;
&lt;span id=&quot;cb3-30&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-31&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb3-32&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%r&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;)'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.__class__.&lt;span class=&quot;va&quot;&gt;__name__&lt;/span&gt;, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.ipaddr)&lt;/span&gt;
&lt;span id=&quot;cb3-33&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-34&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-35&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RoutingTable(&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb3-36&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-37&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, oldrt):&lt;/span&gt;
&lt;span id=&quot;cb3-38&quot;&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.oldrt &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; oldrt&lt;/span&gt;
&lt;span id=&quot;cb3-39&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-40&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__len__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb3-41&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.oldrt.getSize()&lt;/span&gt;
&lt;span id=&quot;cb3-42&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-43&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__getitem__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, index):&lt;/span&gt;
&lt;span id=&quot;cb3-44&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; index &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb3-45&quot;&gt;            &lt;span class=&quot;cf&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;pp&quot;&gt;IndexError&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-46&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; Route(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.oldrt.getRouteByIndex(index))&lt;/span&gt;
&lt;span id=&quot;cb3-47&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-48&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-49&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Route(&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb3-50&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-51&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, old_route):&lt;/span&gt;
&lt;span id=&quot;cb3-52&quot;&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.old_route &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; old_route&lt;/span&gt;
&lt;span id=&quot;cb3-53&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-54&quot;&gt;    &lt;span class=&quot;at&quot;&gt;@property&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-55&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; name(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb3-56&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.old_route.getName()&lt;/span&gt;
&lt;span id=&quot;cb3-57&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-58&quot;&gt;    &lt;span class=&quot;at&quot;&gt;@property&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-59&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; ipaddr(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb3-60&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.old_route.getIPAddr()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;No dispute that the interface is superior, but the implementation is using delegation as if it is dogma. The usage pattern has to be extrapolated from one example, but here are the issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom exceptions are not helpful if they do nothing. The consumer of this code &lt;em&gt;does not&lt;/em&gt; use &lt;code&gt;NetworkElementError&lt;/code&gt;, and has lost the traceback if it did. Error hiding is not error handling.&lt;/li&gt;
&lt;li&gt;Comparing classes with &lt;code&gt;==&lt;/code&gt; is widely considered an anti-pattern, as opposed to &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;issubclass&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Route&lt;/code&gt; object doesn’t need to delegate. There is no reason to assume that the underlying attribute access must be lazy, particularly since the iteration could be lazy instead. A named tuple or dataclass would suffice here.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;RoutingTable&lt;/code&gt; object doesn’t need to delegate. There is no need to support random access or lazy evaluation. Its only addition to the interface is to be sequence-like, which could be trivially accomplished by a sequence.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;NetworkElement&lt;/code&gt; doesn’t need to delegate. It has the same name, same constructor, a &lt;code&gt;repr&lt;/code&gt; designed to appear as the original, and only extends behavior. If this doesn’t pass as an &lt;code&gt;is-a&lt;/code&gt; relation, nothing does.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 class=&quot;anchored&quot;&gt;Simple solution&lt;/h2&gt;
&lt;div class=&quot;cell&quot;&gt;
&lt;div class=&quot;sourceCode cell-code&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode python code-with-copy&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; collections&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; jnettool.tools &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; elements&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;Route &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; collections.namedtuple(&lt;span class=&quot;st&quot;&gt;'Route'&lt;/span&gt;, [&lt;span class=&quot;st&quot;&gt;'name'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'ipaddr'&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; NetworkElement(elements.NetworkElement):&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;    &lt;span class=&quot;at&quot;&gt;@property&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-8&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; routing_table(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb4-9&quot;&gt;        table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.getRoutingTable()&lt;/span&gt;
&lt;span id=&quot;cb4-10&quot;&gt;        routes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(table.getRouteByIndex, &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(table.getSize()))&lt;/span&gt;
&lt;span id=&quot;cb4-11&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; [Route(route.getName(), route.getIPAddr()) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; route &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; routes]&lt;/span&gt;
&lt;span id=&quot;cb4-12&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-13&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__enter__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb4-14&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-15&quot;&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-16&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__exit__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, exc_type, exc_val, exc_tb):&lt;/span&gt;
&lt;span id=&quot;cb4-17&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;isinstance&lt;/span&gt;(exc_val, elements.MissingVar):&lt;/span&gt;
&lt;span id=&quot;cb4-18&quot;&gt;            logging.exception(&lt;span class=&quot;st&quot;&gt;&quot;No routing table found&quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-19&quot;&gt;            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.cleanup(&lt;span class=&quot;st&quot;&gt;'rollback'&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-20&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&quot;cb4-21&quot;&gt;            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.cleanup(&lt;span class=&quot;st&quot;&gt;'commit'&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-22&quot;&gt;        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.disconnect()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which version is more maintainable? Surely the simpler one.&lt;/p&gt;
&lt;p&gt;Which version is more extensible? Well, by whom? The implementor can extend either just as easily. The caller can use the inherited version without losing any functionality.&lt;/p&gt;
&lt;p&gt;So a better question might be which version is more flexible or reusable? Surely the inherited version, because the delegated version would need to access &lt;code&gt;oldne&lt;/code&gt;. Even naming the delegate is a pain point, because one has to decide if it is a part of the public interface or not. Should it have 0, 1, or 2 leading underscores? Delegation is often touted as achieving both encapsulation and extensibility, despite being opposing goals.&lt;/p&gt;
&lt;p&gt;Finally, there is also a simpler interface, again with the caveat that there is only one usage example. An iterable of 2-field objects, one of which is called &lt;code&gt;name&lt;/code&gt;, and “points to” the other field. Sounds like a mapping.&lt;/p&gt;
&lt;div class=&quot;cell&quot;&gt;
&lt;div class=&quot;sourceCode cell-code&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode python code-with-copy&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; NetworkElement(elements.NetworkElement):&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;    &lt;span class=&quot;at&quot;&gt;@property&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; routing_table(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;        table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.getRoutingTable()&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;        routes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(table.getRouteByIndex, &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(table.getSize()))&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; {route.getName(): route.getIPAddr() &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; route &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; routes}&lt;/span&gt;
&lt;span id=&quot;cb5-7&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;</description>
	<pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: Episode 22 – Git and Django with Adam Johnson</title>
	<guid>https://www.blog.pythonlibrary.org/2023/11/17/episode-22-git-and-django-with-adam-johnson/</guid>
	<link>https://www.blog.pythonlibrary.org/2023/11/17/episode-22-git-and-django-with-adam-johnson/</link>
	<description>&lt;p&gt;You may know Adam from all his work around the Django web framework. If you head to the &lt;a href=&quot;https://pypi.org/user/AdamChainz/&quot; rel=&quot;&quot;&gt;Python Package Index (PyPI)&lt;/a&gt;, you will see that Adam has made or contributed to more than 80 projects!&lt;/p&gt;
&lt;p&gt;Adam recently released a new book called&lt;a href=&quot;https://adamchainz.gumroad.com/l/bygdx&quot; rel=&quot;&quot;&gt; Boost Your Git DX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Listen in as we chat about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Book writing&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;and much more!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;header-with-anchor-widget&quot;&gt;Links&lt;/h2&gt;
&lt;div id=&quot;§links&quot; class=&quot;header-anchor-widget offset-top&quot;&gt;
&lt;div class=&quot;header-anchor-widget-button-container&quot;&gt;
&lt;div class=&quot;header-anchor-widget-button&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://adamchainz.gumroad.com/l/byddx&quot; rel=&quot;&quot;&gt;Boost Your Django DX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://adamchainz.gumroad.com/l/bygdx&quot; rel=&quot;&quot;&gt;Boost Your Git DX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://adamchainz.gumroad.com/l/suydt&quot; rel=&quot;&quot;&gt;Speed Up Your Django Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adam Johnson’s &lt;a href=&quot;https://adamj.eu/&quot; rel=&quot;&quot;&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The post &lt;a href=&quot;https://www.blog.pythonlibrary.org/2023/11/17/episode-22-git-and-django-with-adam-johnson/&quot;&gt;Episode 22 &amp;#8211; Git and Django with Adam Johnson&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.blog.pythonlibrary.org&quot;&gt;Mouse Vs Python&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 17 Nov 2023 13:57:43 +0000</pubDate>
</item>
<item>
	<title>Real Python: The Real Python Podcast – Episode #181: Computational Thinking &amp;amp; Learning Python During an AI Revolution</title>
	<guid>https://realpython.com/podcasts/rpp/181/</guid>
	<link>https://realpython.com/podcasts/rpp/181/</link>
	<description>&lt;p&gt;Has the current growth of artificial intelligence (AI) systems made you wonder what the future holds for Python developers? What are the hidden benefits of learning to program in Python and practicing computational thinking? This week on the show, we speak with author Lawrence Gray about his upcoming book &quot;Mastering Python: A Problem Solving Approach.&quot;&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 17 Nov 2023 12:00:00 +0000</pubDate>
</item>
<item>
	<title>PyCharm: PyCharm 2023.3 EAP 7 Is Out!</title>
	<guid>https://blog.jetbrains.com/pycharm/2023/11/2023-3-eap-7/</guid>
	<link>https://blog.jetbrains.com/pycharm/2023/11/2023-3-eap-7/</link>
	<description>&lt;p&gt;You can download the build from our&amp;nbsp;&lt;a href=&quot;https://www.jetbrains.com/pycharm/nextversion/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;website&lt;/a&gt;, get it from the free&amp;nbsp;&lt;a href=&quot;https://www.jetbrains.com/toolbox-app/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Toolbox App&lt;/a&gt;, or update to it using snaps if you’re an Ubuntu user.&lt;/p&gt;



&lt;img width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://blog.jetbrains.com/wp-content/uploads/2023/09/Blog_Featured_image_1280x720_PyCharm-2x.png&quot; alt=&quot;&quot; class=&quot;wp-image-391623&quot; /&gt;


&lt;p align=&quot;center&quot;&gt;&lt;a class=&quot;jb-download-button&quot; href=&quot;https://www.jetbrains.com/pycharm/nextversion/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Download PyCharm 2023.3 EAP&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;/p&gt;



&lt;p&gt;The seventh build of the Early Access Program for PyCharm 2023.3 brings improvements to:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Django Structure&lt;/em&gt; view.&lt;/li&gt;



&lt;li&gt;&lt;em&gt;Search Everywhere&lt;/em&gt;.&lt;/li&gt;



&lt;li&gt;Support for nested classes in HTML completion.&lt;/li&gt;



&lt;li&gt;Angular 17 support.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;These are the most important updates for this build. For the full list of changes in this EAP build, read the &lt;a href=&quot;https://youtrack.jetbrains.com/articles/PY-A-233538147/PyCharm-2023.3-EAP-7-233.11799.32-build-Release-Notes&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;We’re dedicated to giving you the best possible experience, and your feedback is vital. If you find any bugs, please report them via our&amp;nbsp;&lt;a href=&quot;https://youtrack.jetbrains.com/issues/PY&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;issue tracker&lt;/a&gt;. And if you have any questions or comments, feel free to share them in the comments below or get in touch with us on&amp;nbsp;&lt;a href=&quot;https://twitter.com/pycharm&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;X (formerly Twitter)&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 17 Nov 2023 09:42:14 +0000</pubDate>
</item>
<item>
	<title>PyBites: Salary Negotiation Tips</title>
	<guid>https://pybit.es/articles/salary-negotiation-tips/</guid>
	<link>https://pybit.es/articles/salary-negotiation-tips/</link>
	<description>&lt;p class=&quot;&quot;&gt;How to better negotiate your salary? Our new podcast episode offers practical tips!&lt;/p&gt;



&lt;p class=&quot;&quot;&gt;Listen here:&lt;/p&gt;



&lt;div id=&quot;buzzsprout-player-13968275&quot;&gt;&lt;/div&gt;



&lt;p class=&quot;&quot;&gt;Or on YouTube:&lt;/p&gt;



&lt;div class=&quot;wp-block-embed__wrapper&quot;&gt;

&lt;/div&gt;



&lt;p class=&quot;&quot;&gt;In this week&amp;#8217;s podcast episode we tune into a&amp;nbsp;&lt;a href=&quot;https://pybitesdevelopermindset.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PDM&lt;/a&gt;&amp;nbsp;Mindset Hacking call where Julian offers the group some valuable tips when it comes to negotiating your salary when applying for jobs.&amp;nbsp;&lt;br /&gt;&lt;br /&gt;These tips will help you determine what your worth is and better negotiate as a professional developer.&lt;br /&gt;&lt;br /&gt;Chapters:&lt;br /&gt;00:00 Intro&lt;br /&gt;00:59 Preparation, do your research&lt;br /&gt;03:30 Have your portfolio ready&lt;br /&gt;04:13 Know your worth&lt;br /&gt;05:58 What do you need?&lt;br /&gt;08:20 Good prep instills confidence&lt;br /&gt;09:40 Other benefits and perks&lt;br /&gt;10:46 Advocate for yourself based on evidence&lt;br /&gt;12:45 Understanding the role you’re going for&lt;br /&gt;13:50 Know where to stop&lt;br /&gt;14:30 70% is prep&lt;br /&gt;14:55 Wrap up&lt;br /&gt;&lt;br /&gt;Our coaching goes beyond only tech + Python; we also coach people on mindset, which often is the missing piece to unlock new levels in their developer careers. &lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/1f4a1.png&quot; alt=&quot;💡&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;



&lt;p class=&quot;&quot;&gt;For more information, check out&amp;nbsp;&lt;a href=&quot;https://pybitesdevelopermindset.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;our PDM program&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&amp;#8212;&lt;br /&gt;&lt;a href=&quot;https://pybitesdevelopermindset.com/resources&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Learn how Pybites can help&lt;/a&gt;&amp;nbsp;you succeed in your Python journey &lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/1f40d.png&quot; alt=&quot;🐍&quot; class=&quot;wp-smiley&quot; /&gt; &lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/1f4aa.png&quot; alt=&quot;💪&quot; class=&quot;wp-smiley&quot; /&gt;&lt;br /&gt;Join our&amp;nbsp;&lt;a href=&quot;https://pybites.circle.so/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python Developer Community&lt;/a&gt;&amp;nbsp;for free &lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/1f310.png&quot; alt=&quot;🌐&quot; class=&quot;wp-smiley&quot; /&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/1f44b.png&quot; alt=&quot;👋&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 17 Nov 2023 09:13:41 +0000</pubDate>
</item>
<item>
	<title>Marcos Dione: is-dinant-dead-or-a-tip-for-writing-regular-expressions</title>
	<guid>http://www.grulic.org.ar/~mdione/glob//posts/is-dinant-dead-or-a-tip-for-writing-regular-expressions/</guid>
	<link>http://www.grulic.org.ar/~mdione/glob//posts/is-dinant-dead-or-a-tip-for-writing-regular-expressions/</link>
	<description>&lt;p&gt;&lt;em&gt;NE: Another dictated and quickly revised post. Sorry for the mess.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last night I was trying to develop a Prometheeus exporter for Apache logs.
There's only one already written but it doesn't provide
much information, and I just wanted to try myself (yes, a little NIH).&lt;/p&gt;

&lt;p&gt;So I decided
to start with the usual thing; that is, parsing the log lines. What's the best thing to do this
than regular expressions and since I needed to capture
a lot of stuff, and then be able to reference them, I thought &quot;Oh yeah, now I remember my
project &lt;a href=&quot;https://github.com/StyXman/dinant&quot;&gt;dinant&lt;/a&gt;. What happened with it?&quot;&lt;/p&gt;

&lt;p&gt;I opened the last version of the source file
and I found out that it's incomplete code and it's not in a good shape. So I said &quot;look,
it's too late, I'm not going to put it back in shape this because, even if I'm doing this for a hobby,
eventually I will need this for work, so I will try to get something quick fast, and then
when I have the time I'll see if I can revive dinant&quot;. So the answer to the title question is
&quot;maybe&quot;.&lt;/p&gt;

&lt;p&gt;One of the ideas of dinant was that you would build your
regular expressions piece by piece. Because it provides blocks that
you could easily combine, that made building the regular expression easy, but it doesn't mean
that you cannot do that already. For instance the first thing I have to parse is an IP address.
What's an IP address? It's four octets joined by three dots. So we just
define a regular expression that matches the octet and then a regular expression that matches the whole
IP. Then for the rest of the fields of the line I kept using the
same idea.&lt;/p&gt;

&lt;p&gt;Another tip is that for defining regular expressions I like to use r-strings,
raw strings, so backslashes are escaping regular expression elements like &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; and
not escaping string elements like &lt;code&gt;\n&lt;/code&gt; or &lt;code&gt;\t&lt;/code&gt;, and given that they are prefixed by &lt;code&gt;r&lt;/code&gt;, to me it's not
only a raw string but it's also a regular expression string :)&lt;/p&gt;

&lt;p&gt;Finally, building your regular expressions block by block and then combining them
in a final regular expression should make your regular expressions easier to test,
because then you can you can build test code that test each block individually, and then you
test bigger and bigger expressions, exactly like I did for dinant.&lt;/p&gt;

&lt;p&gt;Here's the regexps quite well tested:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import re

capture = lambda name, regexp: f&quot;(?P&amp;lt;{name}&amp;gt;{regexp})&quot;

octect = r'([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])'
assert re.fullmatch(octect, '0') is not None
assert re.fullmatch(octect, '9') is not None
assert re.fullmatch(octect, '10') is not None
assert re.fullmatch(octect, '99') is not None
assert re.fullmatch(octect, '100') is not None
assert re.fullmatch(octect, '255') is not None
assert re.fullmatch(octect, '-1') is None
assert re.fullmatch(octect, '256') is None

IPv4 = r'\.'.join([octect] * 4)  # thanks to r'', the \ is a regexp escape symbol, not a string escape symbol
assert re.fullmatch(IPv4, '0.0.0.0') is not None
assert re.fullmatch(IPv4, '255.255.255.255') is not None
assert re.fullmatch(IPv4, '255.255.255') is None
assert re.fullmatch(IPv4, '255.255') is None
assert re.fullmatch(IPv4, '255') is None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Meanwhile, after reading
&lt;a href=&quot;https://www.robustperception.io/getting-metrics-from-apache-logs-using-the-grok-exporter/&quot;&gt;this&lt;/a&gt;, I decided to just use
&lt;a href=&quot;https://github.com/fstab/grok_exporter/&quot;&gt;the grok exporter&lt;/a&gt;. More on that soon.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;selflink&quot;&gt;python&lt;/span&gt; &lt;a href=&quot;http://www.grulic.org.ar/~mdione/glob//tags/dinant/&quot;&gt;dinant&lt;/a&gt; &lt;a href=&quot;http://www.grulic.org.ar/~mdione/glob//tags/regexp/&quot;&gt;regexp&lt;/a&gt; &lt;a href=&quot;http://www.grulic.org.ar/~mdione/glob//tags/prometheeus/&quot;&gt;prometheeus&lt;/a&gt; &lt;a href=&quot;http://www.grulic.org.ar/~mdione/glob//tags/apache/&quot;&gt;apache&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 17 Nov 2023 08:33:55 +0000</pubDate>
</item>
<item>
	<title>Test and Code: 209: Testing argparse Applications</title>
	<guid>https://testandcode.com/episodes/209-testing-argparse-applications</guid>
	<link>https://testandcode.com/episodes/209-testing-argparse-applications</link>
	<description>&lt;p&gt;How do you test the argument parsing bit of an application that uses argparse?&lt;/p&gt;&lt;p&gt;This episode covers:&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Design for Test: Structuring your app or script so it's easier to test.&lt;/li&gt;
&lt;li&gt;pytest &amp;amp; capsys for testing stdout&lt;/li&gt;
&lt;li&gt;Adding debug and preview flags for debugging and testing&lt;/li&gt;
&lt;li&gt;And reverting to subprocess.run if you can't modify the code under test&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Also, there's a full writeup and code samples available:&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Blog post: &lt;a href=&quot;https://pythontest.com/testing-argparse-apps/&quot;&gt;Testing argparse Applications&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/okken/test-argparse-apps-hello-world&quot;&gt;Code Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;p&gt;&lt;strong&gt;The Complete pytest Course&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;For the fastest way to learn pytest, go to &lt;a href=&quot;https://courses.pythontest.com/&quot;&gt;courses.pythontest.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Whether your new to testing or pytest, or just want to maximize your efficiency and effectiveness when testing.&lt;/li&gt;
&lt;/ul&gt;&amp;lt;p&amp;gt;How do you test the argument parsing bit of an application that uses argparse?&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;This episode covers:&amp;lt;/p&amp;gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Design for Test: Structuring your app or script so it's easier to test.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;pytest &amp;amp;amp; capsys for testing stdout&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Adding debug and preview flags for debugging and testing&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;And reverting to subprocess.run if you can't modify the code under test&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;Also, there's a full writeup and code samples available:&amp;lt;/p&amp;gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Blog post: &amp;lt;a href=&quot;https://pythontest.com/testing-argparse-apps/&quot;&amp;gt;Testing argparse Applications&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://github.com/okken/test-argparse-apps-hello-world&quot;&amp;gt;Code Repo&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;br&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;The Complete pytest Course&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;For the fastest way to learn pytest, go to &amp;lt;a href=&quot;https://courses.pythontest.com/&quot;&amp;gt;courses.pythontest.com&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Whether your new to testing or pytest, or just want to maximize your efficiency and effectiveness when testing.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;</description>
	<pubDate>Thu, 16 Nov 2023 20:07:04 +0000</pubDate>
</item>
<item>
	<title>Brian Okken: Testing argparse Applications</title>
	<guid>https://pythontest.com/testing-argparse-apps/</guid>
	<link>https://pythontest.com/testing-argparse-apps/</link>
	<description>I was asked recently about how to test the argument parsing bit of an application that used argparse. argparse is a built in Python library for dealing with parsing command line arguments for command line interfaces, CLI&amp;rsquo;s.
You know, like git clone &amp;lt;repo address&amp;gt;.
 git is the application. &amp;lt;repo address&amp;gt; is a command line argument. clone is a sub-command.  Well, that might be a bad example, as I&amp;rsquo;m not going to use subcommands in my example, but lots of this still applies, even if you are using subcommands.</description>
	<pubDate>Thu, 16 Nov 2023 15:20:00 +0000</pubDate>
</item>
<item>
	<title>Talk Python to Me: #438: Celebrating JupyterLab 4 and Jupyter 7 Releases</title>
	<guid>https://talkpython.fm/episodes/show/438/celebrating-jupyterlab-4-and-jupyter-7-releases</guid>
	<link>https://talkpython.fm/episodes/show/438/celebrating-jupyterlab-4-and-jupyter-7-releases</link>
	<description>Jupyter Notebooks and Jupyter Lab have to be one of the most important parts of Python when it comes to bring new users to the Python ecosystem and certainly for the day to day work of data scientists and general scientists who have made some of the biggest discoveries of recent times. And that platform has recently gotten a major upgrade with JupyterLab 4 released and Jupyter Notebook being significantly reworked to be based on the changes from JupyterLab as well. We have an excellent panel of guests, Sylvain Corlay, Frederic Collonval, Jeremy Tuloup, and Afshin Darian here to tell us what's new in these and other parts of the Jupyter ecosystem.&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Links from the show&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Guests&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Sylvain Corlay&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Frederic Collonval&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Jeremy Tuloup&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Afshin Darian&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;JupyterLab 4.0 is Here&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://blog.jupyter.org/jupyterlab-4-0-is-here-388d05e03442&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;blog.jupyter.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Announcing Jupyter Notebook 7&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://blog.jupyter.org/announcing-jupyter-notebook-7-8d6d66126dcf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;blog.jupyter.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;JupyterCon 2023 Videos&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://www.youtube.com/playlist?list=PL_1BH3ug7n1Ih_Yy2TmM7MZ2zogSLZvzE&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;youtube.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Jupyterlite&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://github.com/jupyterlite/jupyterlite&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Download JupyterLab Desktop&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://github.com/jupyterlab/jupyterlab-desktop/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Mythical Man Month Book&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://en.wikipedia.org/wiki/The_Mythical_Man-Month&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;wikipedia.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Blender in Jupyter&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://twitter.com/kolibril13/status/1699790198505353259&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;twitter.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Watch this episode on YouTube&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://www.youtube.com/watch?v=OG41ji18kkU&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;youtube.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Episode transcripts&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/episodes/transcript/438/celebrating-jupyterlab-4-and-jupyter-7-releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;talkpython.fm&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;--- Stay in touch with us ---&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Subscribe to us on YouTube&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/youtube&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;youtube.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Follow Talk Python on Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://fosstodon.org/web/@talkpython&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;&amp;lt;i class=&quot;fa-brands fa-mastodon&quot;&amp;gt;&amp;lt;/i&amp;gt;talkpython&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Follow Michael on Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://fosstodon.org/web/@mkennedy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;&amp;lt;i class=&quot;fa-brands fa-mastodon&quot;&amp;gt;&amp;lt;/i&amp;gt;mkennedy&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Sponsors&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;a href='https://talkpython.fm/phylum-research'&amp;gt;Phylum&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;a href='https://talkpython.fm/python-tutor'&amp;gt;Python Tutor&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;a href='https://talkpython.fm/training'&amp;gt;Talk Python Training&amp;lt;/a&amp;gt;</description>
	<pubDate>Thu, 16 Nov 2023 08:00:00 +0000</pubDate>
</item>
<item>
	<title>Matt Layman: Parse Inbound Email - Building SaaS with Python and Django #175</title>
	<guid>https://www.mattlayman.com/blog/2023/parse-inbound-email-building-saas-with-python-and-django-175/</guid>
	<link>https://www.mattlayman.com/blog/2023/parse-inbound-email-building-saas-with-python-and-django-175/</link>
	<description>In this episode, we switched to the inbound side and parsed an email to transform it into a journal entry. This caused us to look into the dateutil library and look at Python&amp;rsquo;s standard email module to use EmailMessage.</description>
	<pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>death and gravity: reader 3.10 released – storage internal API</title>
	<guid>https://death.andgravity.com/reader-3-10</guid>
	<link>https://death.andgravity.com/reader-3-10</link>
	<description>&lt;p&gt;Hi there!&lt;/p&gt;
&lt;p&gt;I'm happy to announce version 3.10 of &lt;strong&gt;&lt;a class=&quot;external&quot; href=&quot;https://github.com/lemon24/reader&quot;&gt;reader&lt;/a&gt;&lt;/strong&gt;, a Python feed reader library.&lt;/p&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What's new?&lt;span class=&quot;headerlink&quot;&gt; &lt;a href=&quot;https://death.andgravity.com/reader-3-10#what-s-new&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Here are the highlights since &lt;a class=&quot;internal&quot; href=&quot;https://death.andgravity.com/reader-3-9&quot;&gt;reader 3.9&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;storage-internal-api&quot;&gt;Storage internal API&lt;span class=&quot;headerlink&quot;&gt; &lt;a href=&quot;https://death.andgravity.com/reader-3-10#storage-internal-api&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a class=&quot;external&quot; href=&quot;https://reader.readthedocs.io/en/latest/internal.html#storage&quot;&gt;storage internal API&lt;/a&gt; is now documented!&lt;/p&gt;
&lt;p&gt;This is important because
it &lt;strong&gt;opens up &lt;em&gt;reader&lt;/em&gt; to using other databases&lt;/strong&gt; than SQLite.&lt;/p&gt;
&lt;p&gt;The protocols are &lt;em&gt;mostly&lt;/em&gt; stable,
but some changes are still expected.
The long term goal is full stabilization,
but at least one other implementation needs to exists before that,
to work out any remaining kinks.&lt;/p&gt;
&lt;p&gt;A SQLAlchemy backend would be especially useful,
since it would provide access to a variety of database engines
mostly out of the box.
(Alas, I do not have time nor a need for this at the moment.
Interested on working on it? &lt;a class=&quot;external&quot; href=&quot;https://reader.readthedocs.io/en/latest/contributing.html&quot;&gt;Let me know!&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&quot;why-not-use-sqlalchemy-from-the-start&quot;&gt;Why not use SQLAlchemy from the start?&lt;span class=&quot;headerlink&quot;&gt; &lt;a href=&quot;https://death.andgravity.com/reader-3-10#why-not-use-sqlalchemy-from-the-start&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;In the beginning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I wanted to keep things as simple as possible,
so I stay motivated for the long term.
I also wanted to follow a &lt;a class=&quot;external&quot; href=&quot;https://hintjens.gitbooks.io/scalable-c/content/chapter1.html#problem-what-do-we-do-next&quot;&gt;problem-solution&lt;/a&gt; approach,
which cautions against solving problems you don't have.
(Details on both &lt;a class=&quot;internal&quot; href=&quot;https://death.andgravity.com/own-query-builder#background&quot;&gt;here&lt;/a&gt;
and &lt;a class=&quot;internal&quot; href=&quot;https://death.andgravity.com/reader-3-4#5-years-2000-commits&quot;&gt;here&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;By that time, I was already a SQLite fan,
and due to the single-user nature of &lt;em&gt;reader&lt;/em&gt;,
I was relatively confident concurrency won't be an issue.&lt;/li&gt;
&lt;li&gt;I didn't know exactly where and how I would deploy the web app;
&lt;a class=&quot;external&quot; href=&quot;https://docs.python.org/3/library/sqlite3.html&quot;&gt;sqlite3&lt;/a&gt; being in the standard library made it very appealing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since then,
I did come up with some of my own complexity –
&lt;em&gt;reader&lt;/em&gt; has a &lt;a class=&quot;internal&quot; href=&quot;https://death.andgravity.com/query-builder&quot;&gt;query builder&lt;/a&gt; and a migration system
(albeit both of them tiny),
and there were &lt;em&gt;some&lt;/em&gt; concurrency issues.
SQLAlchemy would have likely helped with the first two,
but not with the last.
Overall, I still think plain SQLite was the right choice at the time.&lt;/p&gt;
&lt;h3 id=&quot;deprecated-sqlite3-datetime-support&quot;&gt;Deprecated sqlite3 datetime support&lt;span class=&quot;headerlink&quot;&gt; &lt;a href=&quot;https://death.andgravity.com/reader-3-10#deprecated-sqlite3-datetime-support&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The default &lt;a class=&quot;external&quot; href=&quot;https://docs.python.org/3/library/sqlite3.html&quot;&gt;sqlite3&lt;/a&gt; datetime adapters/converters were &lt;a class=&quot;external&quot; href=&quot;https://docs.python.org/3.12/library/sqlite3.html#default-adapters-and-converters-deprecated&quot;&gt;deprecated&lt;/a&gt; in Python 3.12.
Since adapters/converters apply to &lt;em&gt;all&lt;/em&gt; database connections,
&lt;em&gt;reader&lt;/em&gt; does not have the option of registering its own
(as a library, it should not change global stuff),
so datetime conversions now happen in the storage.
As an upside,
this provided an opportunity to change the storage
to use timezone-aware datetimes.&lt;/p&gt;
&lt;h3 id=&quot;share-experimental-plugin&quot;&gt;Share experimental plugin&lt;span class=&quot;headerlink&quot;&gt; &lt;a href=&quot;https://death.andgravity.com/reader-3-10#share-experimental-plugin&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;There's a new &lt;a class=&quot;external&quot; href=&quot;https://reader.readthedocs.io/en/latest/plugins.html#share&quot;&gt;share&lt;/a&gt; web app plugin
to add social sharing links to the entry page.&lt;/p&gt;
&lt;p&gt;Ideally, this functionality should end up in a plugin
that adds them to &lt;code&gt;Entry.links&lt;/code&gt;
(to be exposed in &lt;a class=&quot;external&quot; href=&quot;https://github.com/lemon24/reader/issues/320&quot;&gt;#320&lt;/a&gt;),
so all &lt;em&gt;reader&lt;/em&gt; users can benefit from it.&lt;/p&gt;
&lt;h3 id=&quot;python-versions&quot;&gt;Python versions&lt;span class=&quot;headerlink&quot;&gt; &lt;a href=&quot;https://death.andgravity.com/reader-3-10#python-versions&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;None this time, but Python 3.12 support is coming soon!&lt;/p&gt;
&lt;p&gt;For more details, see the full &lt;a class=&quot;external&quot; href=&quot;https://reader.readthedocs.io/en/stable/changelog.html#version-3-10&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;That's it for now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Want to contribute?&lt;/strong&gt;
Check out the &lt;a class=&quot;external&quot; href=&quot;https://reader.readthedocs.io/en/latest/contributing.html&quot;&gt;docs&lt;/a&gt; and the &lt;a class=&quot;external&quot; href=&quot;https://reader.readthedocs.io/en/latest/dev.html#roadmap&quot;&gt;roadmap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learned something new today?&lt;/strong&gt; Share this with others, it really helps! &lt;span class=&quot;text-large&quot;&gt;
&lt;span class=&quot;share-icons&quot;&gt;
&lt;a class=&quot;share-icon pycoders color&quot; href=&quot;https://pycoders.com/submissions&quot; target=&quot;_blank&quot;&gt;PyCoder's Weekly&lt;/a&gt;
&lt;a class=&quot;share-icon hacker-news color&quot; href=&quot;https://news.ycombinator.%63%6f%6d/submitlink?u=https%3A//death.andgravity.com/reader-3-10&amp;t=reader%203.10%20released%20%E2%80%93%20storage%20internal%20API&quot;&gt;HN&lt;/a&gt;
&lt;a class=&quot;share-icon reddit color&quot; href=&quot;https://www.reddit.%63%6f%6d/%73%75%62%6d%69%74?url=https%3A//death.andgravity.com/reader-3-10&amp;title=reader%203.10%20released%20%E2%80%93%20storage%20internal%20API&quot;&gt;Reddit&lt;/a&gt;
&lt;a class=&quot;share-icon linkedin color&quot; href=&quot;https://www.linkedin.%63%6f%6d/sharing/share-offsite/?url=https%3A//death.andgravity.com/reader-3-10&quot;&gt;linkedin&lt;/a&gt;
&lt;a class=&quot;share-icon twitter color&quot; href=&quot;https://twitter.%63%6f%6d/%73%68%61%72%65?text=reader%203.10%20released%20%E2%80%93%20storage%20internal%20API&amp;url=https%3A//death.andgravity.com/reader-3-10&amp;via=_andgravity&quot;&gt;Twitter&lt;/a&gt;
&lt;/span&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-reader&quot;&gt;What is &lt;em&gt;reader&lt;/em&gt;?&lt;span class=&quot;headerlink&quot;&gt; &lt;a href=&quot;https://death.andgravity.com/reader-3-10#what-is-reader&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;reader&lt;/strong&gt; takes care
of the core functionality required by a feed reader,
so you can focus on what makes &lt;strong&gt;yours&lt;/strong&gt; different.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;https://death.andgravity.com/_file/reader-2-0/reader.png&quot; alt=&quot;reader in action&quot; /&gt;
&lt;em&gt;reader&lt;/em&gt; allows you to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;retrieve, store, and manage &lt;strong&gt;Atom&lt;/strong&gt;, &lt;strong&gt;RSS&lt;/strong&gt;, and &lt;strong&gt;JSON&lt;/strong&gt; feeds&lt;/li&gt;
&lt;li&gt;mark articles as read or important&lt;/li&gt;
&lt;li&gt;add arbitrary tags/metadata to feeds and articles&lt;/li&gt;
&lt;li&gt;filter feeds and articles&lt;/li&gt;
&lt;li&gt;full-text search articles&lt;/li&gt;
&lt;li&gt;get statistics on feed and user activity&lt;/li&gt;
&lt;li&gt;write plugins to extend its functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;...all these with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a stable, clearly documented API&lt;/li&gt;
&lt;li&gt;excellent test coverage&lt;/li&gt;
&lt;li&gt;fully typed Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To find out more, check out the &lt;a class=&quot;external&quot; href=&quot;https://github.com/lemon24/reader&quot;&gt;GitHub repo&lt;/a&gt; and the &lt;a class=&quot;external&quot; href=&quot;https://reader.readthedocs.io/en/stable/&quot;&gt;docs&lt;/a&gt;,
or give the &lt;a class=&quot;external&quot; href=&quot;https://reader.readthedocs.io/en/stable/tutorial.html&quot;&gt;tutorial&lt;/a&gt; a try.&lt;/p&gt;
&lt;h2 id=&quot;why-use-a-feed-reader-library&quot;&gt;Why use a feed reader library?&lt;span class=&quot;headerlink&quot;&gt; &lt;a href=&quot;https://death.andgravity.com/reader-3-10#why-use-a-feed-reader-library&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Have you been unhappy with existing feed readers and wanted to make your own, but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;never knew where to start?&lt;/li&gt;
&lt;li&gt;it seemed like too much work?&lt;/li&gt;
&lt;li&gt;you don't like writing backend code?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Are you already working with &lt;a class=&quot;external&quot; href=&quot;https://feedparser.readthedocs.io/en/latest/&quot;&gt;feedparser&lt;/a&gt;, but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;want an easier way to store, filter, sort and search feeds and entries?&lt;/li&gt;
&lt;li&gt;want to get back type-annotated objects instead of dicts?&lt;/li&gt;
&lt;li&gt;want to restrict or deny file-system access?&lt;/li&gt;
&lt;li&gt;want to change the way feeds are retrieved by using &lt;a class=&quot;external&quot; href=&quot;https://requests.readthedocs.io&quot;&gt;Requests&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;want to also support &lt;a class=&quot;external&quot; href=&quot;https://jsonfeed.org/&quot;&gt;JSON Feed&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;want to support custom information sources?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;... while still supporting all the feed types feedparser does?&lt;/p&gt;
&lt;p&gt;If you answered yes to any of the above, &lt;em&gt;reader&lt;/em&gt; can help.&lt;/p&gt;
&lt;h2 id=&quot;the-reader-philosophy&quot;&gt;The &lt;em&gt;reader&lt;/em&gt; philosophy&lt;span class=&quot;headerlink&quot;&gt; &lt;a href=&quot;https://death.andgravity.com/reader-3-10#the-reader-philosophy&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;reader&lt;/em&gt; is a library&lt;/li&gt;
&lt;li&gt;&lt;em&gt;reader&lt;/em&gt; is for the long term&lt;/li&gt;
&lt;li&gt;&lt;em&gt;reader&lt;/em&gt; is extensible&lt;/li&gt;
&lt;li&gt;&lt;em&gt;reader&lt;/em&gt; is stable (within reason)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;reader&lt;/em&gt; is simple to use; API matters&lt;/li&gt;
&lt;li&gt;&lt;em&gt;reader&lt;/em&gt; features work well together&lt;/li&gt;
&lt;li&gt;&lt;em&gt;reader&lt;/em&gt; is tested&lt;/li&gt;
&lt;li&gt;&lt;em&gt;reader&lt;/em&gt; is documented&lt;/li&gt;
&lt;li&gt;&lt;em&gt;reader&lt;/em&gt; has minimal dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;why-make-your-own-feed-reader&quot;&gt;Why make your own feed reader?&lt;span class=&quot;headerlink&quot;&gt; &lt;a href=&quot;https://death.andgravity.com/reader-3-10#why-make-your-own-feed-reader&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;So you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have full control over your data&lt;/li&gt;
&lt;li&gt;control what features it has or doesn't have&lt;/li&gt;
&lt;li&gt;decide how much you pay for it&lt;/li&gt;
&lt;li&gt;make sure it doesn't get closed while you're still using it&lt;/li&gt;
&lt;li&gt;really, it's &lt;a class=&quot;external&quot; href=&quot;https://rachelbythebay.com/w/2011/10/26/fred/&quot;&gt;easier than you think&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, this may not be your cup of tea, but if it is, &lt;em&gt;reader&lt;/em&gt; can help.&lt;/p&gt;</description>
	<pubDate>Wed, 15 Nov 2023 21:42:52 +0000</pubDate>
</item>
<item>
	<title>Stack Abuse: Guide to Heaps in Python</title>
	<guid>https://stackabuse.com/guide-to-heaps-in-python/</guid>
	<link>https://stackabuse.com/guide-to-heaps-in-python/</link>
	<description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Imagine a bustling airport with flights taking off and landing every minute. Just as air traffic controllers prioritize flights based on urgency, heaps help us manage and process data based on specific criteria, ensuring that the most &quot;urgent&quot; or &quot;important&quot; piece of data is always accessible at the top.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this guide, we'll embark on a journey to understand heaps from the ground up. We'll start by demystifying what heaps are and their inherent properties. From there, we'll dive into Python's own implementation of heaps, the &lt;code&gt;heapq&lt;/code&gt; module, and explore its rich set of functionalities. So, if you've ever wondered how to efficiently manage a dynamic set of data where the highest (or lowest) priority element is frequently needed, you're in for a treat.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;whatisaheap&quot;&gt;What is a Heap?&lt;/h3&gt;
&lt;p&gt;The first thing you'd want to understand before diving into the usage of heaps is &lt;em&gt;what is a heap&lt;/em&gt;. A heap stands out in the world of data structures as a tree-based powerhouse, particularly skilled at &lt;strong&gt;maintaining order and hierarchy&lt;/strong&gt;. While it might resemble a binary tree to the untrained eye, the nuances in its structure and governing rules distinctly set it apart.&lt;/p&gt;
&lt;p&gt;One of the defining characteristics of a heap is its nature as a &lt;em&gt;&lt;strong&gt;complete binary tree&lt;/strong&gt;&lt;/em&gt;. This means that every level of the tree, except perhaps the last, is entirely filled. Within this last level, nodes populate from left to right. Such a structure ensures that heaps can be efficiently represented and manipulated using arrays or lists, with each element's position in the array mirroring its placement in the tree.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/guide-to-heaps-in-python-1.png&quot; alt=&quot;guide-to-heaps-in-python-01.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The true essence of a heap, however, lies in its &lt;em&gt;&lt;strong&gt;ordering&lt;/strong&gt;&lt;/em&gt;. In a &lt;em&gt;max heap&lt;/em&gt;, any given node's value surpasses or equals the values of its children, positioning the largest element right at the root. On the other hand, a &lt;em&gt;min heap&lt;/em&gt; operates on the opposite principle: any node's value is either less than or equal to its children's values, ensuring the smallest element sits at the root.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/guide-to-heaps-in-python-2.png&quot; alt=&quot;guide-to-heaps-in-python-02.png&quot; /&gt;&lt;/p&gt;

            &lt;div class=&quot;alert alert-note&quot;&gt;
                &lt;div class=&quot;flex&quot;&gt;
                    
                        &lt;div class=&quot;flex-shrink-0 mr-3&quot;&gt;
                            &lt;img src=&quot;https://stackabuse.com/assets/images/icon-information-circle-solid.svg&quot; class=&quot;icon&quot; /&gt;
                        &lt;/div&gt;
                        
                    &lt;div class=&quot;w-full&quot;&gt;
            &lt;p&gt;&lt;strong&gt;Advice:&lt;/strong&gt; You can visualize a heap as a &lt;em&gt;pyramid of numbers&lt;/em&gt;. For a max heap, as you ascend from the base to the peak, the numbers increase, culminating in the maximum value at the pinnacle. In contrast, a min heap starts with the minimum value at its peak, with numbers escalating as you move downwards.&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;p&gt;As we progress, we'll dive deeper into how these inherent properties of heaps enable efficient operations and how Python's &lt;code&gt;heapq&lt;/code&gt; module seamlessly integrates heaps into our coding endeavors.&lt;/p&gt;
&lt;h3 id=&quot;characteristicsandpropertiesofheaps&quot;&gt;Characteristics and Properties of Heaps&lt;/h3&gt;
&lt;p&gt;Heaps, with their unique structure and ordering principles, bring forth a set of distinct characteristics and properties that make them invaluable in various computational scenarios.&lt;/p&gt;
&lt;p&gt;First and foremost, heaps are &lt;strong&gt;inherently efficient&lt;/strong&gt;. Their tree-based structure, specifically the complete binary tree format, ensures that operations like insertion and extraction of priority elements (maximum or minimum) can be performed in logarithmic time, typically &lt;em&gt;O(log n)&lt;/em&gt;. This efficiency is a boon for algorithms and applications that require frequent access to priority elements.&lt;/p&gt;
&lt;p&gt;Another notable property of heaps is their &lt;strong&gt;memory efficiency&lt;/strong&gt;. Since heaps can be represented using arrays or lists without the need for explicit pointers to child or parent nodes, they are space-saving. Each element's position in the array corresponds to its placement in the tree, allowing for predictable and straightforward traversal and manipulation.&lt;/p&gt;
&lt;p&gt;The ordering property of heaps, whether as a max heap or a min heap, ensures that &lt;strong&gt;the root always holds the element of highest priority&lt;/strong&gt;. This consistent ordering is what allows for quick access to the top-priority element without having to search through the entire structure.&lt;/p&gt;
&lt;p&gt;Furthermore, heaps are &lt;strong&gt;versatile&lt;/strong&gt;. While binary heaps (where each parent has at most two children) are the most common, heaps can be generalized to have more than two children, known as &lt;em&gt;d-ary heaps&lt;/em&gt;. This flexibility allows for fine-tuning based on specific use cases and performance requirements.&lt;/p&gt;
&lt;p&gt;Lastly, heaps are &lt;strong&gt;self-adjusting&lt;/strong&gt;. Whenever elements are added or removed, the structure rearranges itself to maintain its properties. This dynamic balancing ensures that the heap remains optimized for its core operations at all times.&lt;/p&gt;

            &lt;div class=&quot;alert alert-reference&quot;&gt;
                &lt;div class=&quot;flex&quot;&gt;
                    
                        &lt;div class=&quot;flex-shrink-0 mr-3&quot;&gt;
                            &lt;img src=&quot;https://stackabuse.com/assets/images/icon-link-solid.svg&quot; class=&quot;icon&quot; /&gt;
                        &lt;/div&gt;
                        
                    &lt;div class=&quot;w-full&quot;&gt;
            &lt;p&gt;&lt;strong&gt;Advice:&lt;/strong&gt; These properties made heap data structure a good fit for an efficient sorting algorithm - heap sort. To learn more about heap sort in Python, read our &lt;a target=&quot;_blank&quot; href=&quot;https://stackabuse.com/heap-sort-in-python/&quot;&gt;&quot;Heap Sort in Python&quot;&lt;/a&gt; article.&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;p&gt;As we delve deeper into Python's implementation and practical applications, the true potential of heaps will unfold before us.&lt;/p&gt;
&lt;h3 id=&quot;typesofheaps&quot;&gt;Types of Heaps&lt;/h3&gt;
&lt;p&gt;Not all heaps are created equal. Depending on their ordering and structural properties, heaps can be categorized into different types, each with its own set of applications and advantages. The two main categories are &lt;em&gt;max heap&lt;/em&gt; and &lt;em&gt;min heap&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The most distinguishing feature of a &lt;strong&gt;max heap&lt;/strong&gt; is that the value of any given node is greater than or equal to the values of its children. This ensures that the largest element in the heap always resides at the root. Such a structure is particularly useful when there's a need to frequently access the maximum element, as in certain priority queue implementations.&lt;/p&gt;
&lt;p&gt;The counterpart to the max heap, a &lt;strong&gt;min heap&lt;/strong&gt; ensures that the value of any given node is less than or equal to the values of its children. This positions the smallest element of the heap at the root. Min heaps are invaluable in scenarios where the least element is of prime importance, such as in algorithms that deal with real-time data processing.&lt;/p&gt;
&lt;p&gt;Beyond these primary categories, heaps can also be distinguished based on their branching factor:&lt;/p&gt;
&lt;p&gt;While binary heaps are the most common, with each parent having at most two children, the concept of heaps can be extended to nodes having more than two children. In a &lt;strong&gt;d-ary heap&lt;/strong&gt;, each node has at most &lt;code&gt;d&lt;/code&gt; children. This variation can be optimized for specific scenarios, like decreasing the height of the tree to speed up certain operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Binomial Heap&lt;/strong&gt; is a set of binomial trees that are defined recursively. Binomial heaps are used in priority queue implementations and offer efficient merge operations.&lt;/p&gt;
&lt;p&gt;Named after the famous Fibonacci sequence, the &lt;strong&gt;Fibonacci heap&lt;/strong&gt; offers better-amortized running times for many operations compared to binary or binomial heaps. They're particularly useful in network optimization algorithms.&lt;/p&gt;
&lt;h3 id=&quot;pythonsheapimplementationtheheapqmodule&quot;&gt;Python's Heap Implementation - The &lt;em&gt;heapq&lt;/em&gt; Module&lt;/h3&gt;
&lt;p&gt;Python offers a built-in module for heap operations - the &lt;code&gt;heapq&lt;/code&gt; module. This module provides a collection of heap-related functions that allow developers to transform lists into heaps and perform various heap operations without the need for a custom implementation. Let's dive into the nuances of this module and how it brings you the power of heaps.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;heapq&lt;/code&gt; module doesn't provide a distinct heap data type. Instead, it offers functions that work on regular Python lists, transforming and treating them as &lt;em&gt;binary heaps&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This approach is both memory-efficient and integrates seamlessly with Python's existing data structures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That means that &lt;em&gt;heaps are represented as lists&lt;/em&gt; in &lt;code&gt;heapq&lt;/code&gt;. The beauty of this representation is its simplicity - the zero-based list index system serves as an implicit binary tree. For any given element at position &lt;code&gt;i&lt;/code&gt;, its:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Left Child is at position &lt;code&gt;2*i + 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Right Child is at position &lt;code&gt;2*i + 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Parent Node is at position &lt;code&gt;(i-1)//2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/guide-to-heaps-in-python-3.png&quot; alt=&quot;guide-to-heaps-in-python-03.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This implicit structure ensures that there's no need for a separate node-based binary tree representation, making operations straightforward and memory usage minimal.&lt;/p&gt;

            &lt;div class=&quot;alert alert-note&quot;&gt;
                &lt;div class=&quot;flex&quot;&gt;
                    
                        &lt;div class=&quot;flex-shrink-0 mr-3&quot;&gt;
                            &lt;img src=&quot;https://stackabuse.com/assets/images/icon-information-circle-solid.svg&quot; class=&quot;icon&quot; /&gt;
                        &lt;/div&gt;
                        
                    &lt;div class=&quot;w-full&quot;&gt;
            &lt;p&gt;&lt;strong&gt;Space Complexity:&lt;/strong&gt; Heaps are typically implemented as binary trees but don't require storage of explicit pointers for child nodes. This makes them space-efficient with a space complexity of &lt;em&gt;O(n)&lt;/em&gt; for storing n elements.&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;p&gt;It's essential to note that the &lt;code&gt;heapq&lt;/code&gt; module &lt;strong&gt;creates min heaps by default&lt;/strong&gt;. This means that the smallest element is always at the root (or the first position in the list). If you need a max heap, you'd have to invert order by multiplying elements by &lt;code&gt;-1&lt;/code&gt; or use a custom comparison function.&lt;/p&gt;
&lt;p&gt;Python's &lt;code&gt;heapq&lt;/code&gt; module provides a suite of functions that allow developers to perform various heap operations on lists.&lt;/p&gt;

            &lt;div class=&quot;alert alert-note&quot;&gt;
                &lt;div class=&quot;flex&quot;&gt;
                    
                        &lt;div class=&quot;flex-shrink-0 mr-3&quot;&gt;
                            &lt;img src=&quot;https://stackabuse.com/assets/images/icon-information-circle-solid.svg&quot; class=&quot;icon&quot; /&gt;
                        &lt;/div&gt;
                        
                    &lt;div class=&quot;w-full&quot;&gt;
            &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To use the &lt;code&gt;heapq&lt;/code&gt; module in your application, you'll need to import it using simple  &lt;code&gt;import heapq&lt;/code&gt;.&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;p&gt;In the following sections, we'll dive deep into each of these fundamental operations, exploring their mechanics and use cases.&lt;/p&gt;
&lt;h3 id=&quot;howtotransformalistintoaheap&quot;&gt;How to Transform a List into a Heap&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;heapify()&lt;/code&gt; function is the starting point for many heap-related tasks. It takes an iterable (typically a list) and rearranges its elements in-place to satisfy the properties of a min heap:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; heapq

data = [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]
heapq.heapify(data)
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will output a reordered list that represents a valid min heap:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;[1, 1, 2, 3, 3, 9, 4, 6, 5, 5, 5]
&lt;/code&gt;&lt;/pre&gt;

            &lt;div class=&quot;alert alert-note&quot;&gt;
                &lt;div class=&quot;flex&quot;&gt;
                    
                        &lt;div class=&quot;flex-shrink-0 mr-3&quot;&gt;
                            &lt;img src=&quot;https://stackabuse.com/assets/images/icon-information-circle-solid.svg&quot; class=&quot;icon&quot; /&gt;
                        &lt;/div&gt;
                        
                    &lt;div class=&quot;w-full&quot;&gt;
            &lt;p&gt;&lt;strong&gt;Time Complexity:&lt;/strong&gt; Converting an unordered list into a heap using the &lt;code&gt;heapify&lt;/code&gt; function is an &lt;em&gt;O(n)&lt;/em&gt; operation. This might seem counterintuitive, as one might expect it to be &lt;em&gt;O(nlogn)&lt;/em&gt;, but due to the tree structure's properties, it can be achieved in linear time.&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;h3 id=&quot;howtoaddanelementtotheheap&quot;&gt;How to Add an Element to the Heap&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;heappush()&lt;/code&gt; function allows you to insert a new element into the heap while maintaining the heap's properties:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; heapq

heap = []
heapq.heappush(heap, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)
heapq.heappush(heap, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)
heapq.heappush(heap, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(heap)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running the code will give you a list of elements maintaining the min heap property:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;[3, 5, 7]
&lt;/code&gt;&lt;/pre&gt;

            &lt;div class=&quot;alert alert-note&quot;&gt;
                &lt;div class=&quot;flex&quot;&gt;
                    
                        &lt;div class=&quot;flex-shrink-0 mr-3&quot;&gt;
                            &lt;img src=&quot;https://stackabuse.com/assets/images/icon-information-circle-solid.svg&quot; class=&quot;icon&quot; /&gt;
                        &lt;/div&gt;
                        
                    &lt;div class=&quot;w-full&quot;&gt;
            &lt;p&gt;&lt;strong&gt;Time Complexity:&lt;/strong&gt; The insertion operation in a heap, which involves placing a new element in the heap while maintaining the heap property, has a time complexity of &lt;em&gt;O(logn)&lt;/em&gt;. This is because, in the worst case, the element might have to travel from the leaf to the root.&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;h3 id=&quot;howtoremoveandreturnthesmallestelementfromtheheap&quot;&gt;How to Remove and Return the Smallest Element from the Heap&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;heappop()&lt;/code&gt; function extracts and returns the smallest element from the heap (the root in a min heap). After removal, it ensures the list remains a valid heap:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; heapq

heap = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(heapq.heappop(heap))
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(heap)
&lt;/code&gt;&lt;/pre&gt;

            &lt;div class=&quot;alert alert-note&quot;&gt;
                &lt;div class=&quot;flex&quot;&gt;
                    
                        &lt;div class=&quot;flex-shrink-0 mr-3&quot;&gt;
                            &lt;img src=&quot;https://stackabuse.com/assets/images/icon-information-circle-solid.svg&quot; class=&quot;icon&quot; /&gt;
                        &lt;/div&gt;
                        
                    &lt;div class=&quot;w-full&quot;&gt;
            &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;heappop()&lt;/code&gt; is invaluable in algorithms that require processing elements in ascending order, like the Heap Sort algorithm, or when implementing priority queues where tasks are executed based on their urgency.&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;p&gt;This will output the smallest element and the remaining list:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;1
[3, 7, 5, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;1&lt;/code&gt; is the smallest element from the &lt;code&gt;heap&lt;/code&gt;, and the remaining list has maintained the heap property, even after we removed &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

            &lt;div class=&quot;alert alert-note&quot;&gt;
                &lt;div class=&quot;flex&quot;&gt;
                    
                        &lt;div class=&quot;flex-shrink-0 mr-3&quot;&gt;
                            &lt;img src=&quot;https://stackabuse.com/assets/images/icon-information-circle-solid.svg&quot; class=&quot;icon&quot; /&gt;
                        &lt;/div&gt;
                        
                    &lt;div class=&quot;w-full&quot;&gt;
            &lt;p&gt;&lt;strong&gt;Time Complexity:&lt;/strong&gt; Removing the root element (which is the smallest in a min heap or largest in a max heap) and reorganizing the heap also takes &lt;em&gt;O(logn)&lt;/em&gt; time.&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;h3 id=&quot;howtopushanewitemandpopthesmallestitem&quot;&gt;How to Push a New Item and Pop the Smallest Item&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;heappushpop()&lt;/code&gt; function is a combined operation that pushes a new item onto the heap and then pops and returns the smallest item from the heap:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; heapq

heap = [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(heapq.heappushpop(heap, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)) 
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(heap)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will output &lt;code&gt;3&lt;/code&gt;, the smallest element, and print out the new &lt;code&gt;heap&lt;/code&gt; list that now includes &lt;code&gt;4&lt;/code&gt; while maintaining the heap property:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;3
[4, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;

            &lt;div class=&quot;alert alert-note&quot;&gt;
                &lt;div class=&quot;flex&quot;&gt;
                    
                        &lt;div class=&quot;flex-shrink-0 mr-3&quot;&gt;
                            &lt;img src=&quot;https://stackabuse.com/assets/images/icon-information-circle-solid.svg&quot; class=&quot;icon&quot; /&gt;
                        &lt;/div&gt;
                        
                    &lt;div class=&quot;w-full&quot;&gt;
            &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using the &lt;code&gt;heappushpop()&lt;/code&gt; function is more efficient than performing operations of pushing a new element and popping the smallest one separately.&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;h3 id=&quot;howtoreplacethesmallestitemandpushanewitem&quot;&gt;How to Replace the Smallest Item and Push a New Item&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;heapreplace()&lt;/code&gt; function pops the smallest element and pushes a new element onto the heap, all in one efficient operation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; heapq

heap = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(heapq.heapreplace(heap, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(heap)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This prints &lt;code&gt;1&lt;/code&gt;, the smallest element, and the list now includes 4 and maintains the heap property:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;1
[4, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;

            &lt;div class=&quot;alert alert-note&quot;&gt;
                &lt;div class=&quot;flex&quot;&gt;
                    
                        &lt;div class=&quot;flex-shrink-0 mr-3&quot;&gt;
                            &lt;img src=&quot;https://stackabuse.com/assets/images/icon-information-circle-solid.svg&quot; class=&quot;icon&quot; /&gt;
                        &lt;/div&gt;
                        
                    &lt;div class=&quot;w-full&quot;&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;heapreplace()&lt;/code&gt; is beneficial in streaming scenarios where you want to replace the current smallest element with a new value, such as in rolling window operations or real-time data processing tasks.&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;h3 id=&quot;findingmultipleextremesinpythonsheap&quot;&gt;Finding Multiple Extremes in Python's Heap&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nlargest(n, iterable[, key])&lt;/code&gt; and &lt;code&gt;nsmallest(n, iterable[, key])&lt;/code&gt; functions are designed to retrieve multiple largest or smallest elements from an iterable. They can be more efficient than sorting the entire iterable when you only need a few extreme values. For example, say you have the following list and you want to find three smallest and three largest values in the list:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;data = [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;nlargest()&lt;/code&gt; and &lt;code&gt;nsmallest()&lt;/code&gt; functions can come in handy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; heapq

data = [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(heapq.nlargest(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, data))  &lt;span class=&quot;hljs-comment&quot;&gt;# Outputs [9, 6, 5]&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(heapq.nsmallest(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, data))  &lt;span class=&quot;hljs-comment&quot;&gt;# Outputs [1, 1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will give you two lists - one contains the three largest values and the other contains the three smallest values from the &lt;code&gt;data&lt;/code&gt; list:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;[9, 6, 5]
[1, 1, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;howtobuildyourcustomheap&quot;&gt;How to Build Your Custom Heap&lt;/h3&gt;
&lt;p&gt;While Python's &lt;code&gt;heapq&lt;/code&gt; module provides a robust set of tools for working with heaps, there are scenarios where the default min heap behavior might not suffice. Whether you're looking to implement a max heap or need a heap that operates based on custom comparison functions, building a custom heap can be the answer. Let's explore how to tailor heaps to specific needs.&lt;/p&gt;
&lt;h4 id=&quot;implementingamaxheapusingheapq&quot;&gt;Implementing a Max Heap using &lt;code&gt;heapq&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;By default, &lt;code&gt;heapq&lt;/code&gt; creates &lt;em&gt;min heaps&lt;/em&gt;. However, with a simple trick, you can use it to implement a max heap. The idea is to invert the order of elements by multiplying them by &lt;code&gt;-1&lt;/code&gt; before adding them to the heap:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; heapq

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MaxHeap&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
        self.heap = []

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, val&lt;/span&gt;):&lt;/span&gt;
        heapq.heappush(self.heap, -val)

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pop&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -heapq.heappop(self.heap)

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;peek&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -self.heap[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this approach, the largest number (in terms of absolute value) becomes the smallest, allowing the &lt;code&gt;heapq&lt;/code&gt; functions to maintain a max heap structure.&lt;/p&gt;
&lt;h4 id=&quot;heapswithcustomcomparisonfunctions&quot;&gt;Heaps with Custom Comparison Functions&lt;/h4&gt;
&lt;p&gt;Sometimes, you might need a heap that doesn't just compare based on the natural order of elements. For instance, if you're working with complex objects or have specific sorting criteria, a custom comparison function becomes essential.&lt;/p&gt;
&lt;p&gt;To achieve this, you can wrap elements in a helper class that overrides the comparison operators:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; heapq

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CustomElement&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, obj, comparator&lt;/span&gt;):&lt;/span&gt;
        self.obj = obj
        self.comparator = comparator

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__lt__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.comparator(self.obj, other.obj)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;custom_heappush&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;heap, obj, comparator=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x, y: x &amp;lt; y&lt;/span&gt;):&lt;/span&gt;
    heapq.heappush(heap, CustomElement(obj, comparator))

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;custom_heappop&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;heap&lt;/span&gt;):&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; heapq.heappop(heap).obj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this setup, you can define any custom comparator function and use it with the heap.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Heaps offer predictable performance for many operations, making them a reliable choice for priority-based tasks. However, it's essential to consider the specific requirements and characteristics of the application at hand. In some cases, tweaking the heap's implementation or even opting for alternative data structures might yield better real-world performance.&lt;/p&gt;
&lt;p&gt;Heaps, as we've journeyed through, are more than just another data structure. They represent a confluence of efficiency, structure, and adaptability. From their foundational properties to their implementation in Python's &lt;code&gt;heapq&lt;/code&gt; module, heaps offer a robust solution to a myriad of computational challenges, especially those centered around priority.&lt;/p&gt;</description>
	<pubDate>Wed, 15 Nov 2023 19:21:52 +0000</pubDate>
</item>
<item>
	<title>Real Python: Embeddings and Vector Databases With ChromaDB</title>
	<guid>https://realpython.com/chromadb-vector-database/</guid>
	<link>https://realpython.com/chromadb-vector-database/</link>
	<description>&lt;div&gt;&lt;p&gt;The era of &lt;a href=&quot;https://en.wikipedia.org/wiki/Large_language_model&quot;&gt;large language models&lt;/a&gt; (LLMs) is here, bringing with it rapidly evolving libraries like &lt;a href=&quot;https://docs.trychroma.com/&quot;&gt;ChromaDB&lt;/a&gt; that help augment LLM applications. You’ve most likely heard of chatbots like OpenAI’s &lt;a href=&quot;https://realpython.com/chatgpt-coding-mentor-python/&quot;&gt;ChatGPT&lt;/a&gt;, and perhaps you’ve even experienced their remarkable ability to reason about &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_language_processing&quot;&gt;natural language processing (NLP)&lt;/a&gt; problems.&lt;/p&gt;
&lt;p&gt;Modern LLMs, while imperfect, can accurately solve a wide range of problems and provide correct answers to many questions. But, due to the limits of their training and the number of text tokens they can process, LLMs aren’t a silver bullet for all tasks.&lt;/p&gt;
&lt;p&gt;You wouldn’t expect an LLM to provide relevant responses about topics that don’t appear in their training data. For example, if you asked ChatGPT to summarize information in confidential company documents, then you’d be out of luck. You could show some of these documents to ChatGPT, but there’s a limited number of documents that you can upload before you exceed ChatGPT’s maximum number of tokens. How would you select documents to show ChatGPT?&lt;/p&gt;
&lt;p&gt;To address these shortcomings and scale your LLM applications, one great option is to use a vector database like ChromaDB. A &lt;strong&gt;vector database&lt;/strong&gt; allows you to store encoded unstructured objects, like text, as lists of numbers that you can compare to one another. You can, for example, find a collection of documents relevant to a question that you want an LLM to answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this tutorial, you’ll learn about:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Representing &lt;strong&gt;unstructured objects&lt;/strong&gt; with &lt;strong&gt;vectors&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Using &lt;strong&gt;word&lt;/strong&gt; and &lt;strong&gt;text embeddings&lt;/strong&gt; in Python&lt;/li&gt;
&lt;li&gt;Harnessing the power of &lt;strong&gt;vector databases&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Encoding&lt;/strong&gt; and &lt;strong&gt;querying&lt;/strong&gt; over documents with ChromaDB&lt;/li&gt;
&lt;li&gt;Providing &lt;strong&gt;context&lt;/strong&gt; to &lt;strong&gt;LLMs&lt;/strong&gt; like ChatGPT with ChromaDB &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After reading, you’ll have the foundational knowledge to use ChromaDB in your NLP or LLM applications. Before reading, you should be comfortable with the &lt;a href=&quot;https://realpython.com/learning-paths/python-basics/&quot;&gt;basics of Python&lt;/a&gt; and high school math.&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;
&lt;p&gt;&lt;strong&gt;Get Your Code:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/bonus/embeddings-and-vector-databases-with-chromadb-code/&quot; class=&quot;alert-link&quot;&gt;Click here to download free sample code&lt;/a&gt; that shows you how to use ChromaDB to add context to an LLM.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;represent-data-as-vectors&quot;&gt;Represent Data as Vectors&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#represent-data-as-vectors&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before diving into embeddings and vector databases, you should understand what vectors are and what they represent. Feel free to skip ahead to the next section if you’re already comfortable with vector concepts. If you’re not or if you could use a refresher, then keep reading!&lt;/p&gt;
&lt;h3 id=&quot;vector-basics&quot;&gt;Vector Basics&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#vector-basics&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can describe vectors with variable levels of complexity, but one great starting place is to think of a vector as an &lt;a href=&quot;https://realpython.com/numpy-array-programming/#getting-into-shape-intro-to-numpy-arrays&quot;&gt;array&lt;/a&gt; of numbers. For example, you could represent vectors using &lt;a href=&quot;https://realpython.com/numpy-tutorial/&quot;&gt;NumPy&lt;/a&gt; arrays as follows:&lt;/p&gt;
&lt;div class=&quot;codeblock mb-3 w-100&quot;&gt;
  &lt;div class=&quot;codeblock__header d-flex justify-content-between codeblock--blue&quot;&gt;
    &lt;span class=&quot;mr-2 noselect&quot;&gt;Python&lt;/span&gt;
    
    &lt;div class=&quot;noselect&quot;&gt;
      
        &lt;span class=&quot;codeblock__output-toggle&quot; title=&quot;Toggle prompts and output&quot;&gt;&lt;span class=&quot;icon baseline js-codeblock-output-on codeblock__header--icon-lower&quot;&gt;&lt;/span&gt;&lt;/span&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;div class=&quot;highlight python repl highlight--with-header&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;array([1, 0])&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;array([0, 1])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    &lt;button class=&quot;codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only&quot; title=&quot;Copy to clipboard&quot;&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt;&lt;/button&gt;
    
      &lt;span class=&quot;small&quot;&gt;&lt;span class=&quot;icon baseline mr-1 text-success&quot;&gt;&lt;/span&gt;Copied!&lt;/span&gt;
    
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this code block, you import &lt;code&gt;numpy&lt;/code&gt; and create two arrays, &lt;code&gt;vector1&lt;/code&gt; and &lt;code&gt;vector2&lt;/code&gt;, representing vectors. This is one of the most common and useful ways to work with vectors in Python, and &lt;code&gt;NumPy&lt;/code&gt; offers a variety of functionality to manipulate vectors. There are also several other libraries that you can use to work with vector data, such as &lt;a href=&quot;https://realpython.com/pytorch-vs-tensorflow/&quot;&gt;PyTorch&lt;/a&gt;, &lt;a href=&quot;https://realpython.com/pytorch-vs-tensorflow/&quot;&gt;TensorFlow&lt;/a&gt;, &lt;a href=&quot;https://jax.readthedocs.io/en/latest/notebooks/quickstart.html&quot;&gt;JAX&lt;/a&gt;, and &lt;a href=&quot;https://realpython.com/polars-python/&quot;&gt;Polars&lt;/a&gt;. You’ll stick with NumPy for this overview.   &lt;/p&gt;
&lt;p&gt;You’ve created two NumPy arrays that represent vectors. Now what? It turns out you can do a lot of cool things with vectors, but before continuing on, you’ll need to understand some key definitions and properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dimension&lt;/strong&gt;: The dimension of a vector is the number of elements that it contains. In the example above, &lt;code&gt;vector1&lt;/code&gt; and &lt;code&gt;vector2&lt;/code&gt; are both two-dimensional since they each have two elements. You can only visualize vectors with three dimensions or less, but generally, vectors can have any number of dimensions. In fact, as you’ll see later, vectors that encode words and text tend to have hundreds or thousands of dimensions. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Magnitude&lt;/strong&gt;: The magnitude of a vector is a non-negative number that represents the vector’s size or length. You can also refer to the magnitude of a vector as the &lt;strong&gt;norm&lt;/strong&gt;, and you can denote it with &lt;em&gt;||v||&lt;/em&gt; or &lt;em&gt;|v|&lt;/em&gt;. There are many different definitions of magnitude or norm, but the most common is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Norm_(mathematics)#Euclidean_norm&quot;&gt;Euclidean norm&lt;/a&gt; or 2-norm. You’ll learn how to compute this later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unit vector&lt;/strong&gt;: A unit vector is a vector with a magnitude of one. In the example above, &lt;code&gt;vector1&lt;/code&gt; and &lt;code&gt;vector2&lt;/code&gt; are unit vectors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Direction&lt;/strong&gt;: The direction of a vector specifies the line along which the vector points. You can represent direction using angles, unit vectors, or coordinates in different coordinate systems. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dot product (scalar product)&lt;/strong&gt;: The dot product of two vectors, &lt;em&gt;u&lt;/em&gt; and &lt;em&gt;v&lt;/em&gt;, is a number given by &lt;em&gt;u ⋅ v = ||u|| ||v|| cos(θ)&lt;/em&gt;, where &lt;em&gt;θ&lt;/em&gt; is the angle between the two vectors. Another way to compute the dot product is to do an element-wise multiplication of &lt;em&gt;u&lt;/em&gt; and &lt;em&gt;v&lt;/em&gt; and sum the results. The dot product is one of the most important and widely used vector operations because it measures the &lt;strong&gt;similarity&lt;/strong&gt; between two vectors. You’ll see more of this later on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Orthogonal vectors&lt;/strong&gt;: Vectors are orthogonal if their dot product is zero, meaning that they’re at a 90 degree angle to each other. You can think of orthogonal vectors as being completely unrelated to each other. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dense vector&lt;/strong&gt;: A vector is considered dense if most of its elements are non-zero. Later on, you’ll see that words and text are most usefully represented with dense vectors because each dimension encodes meaningful information. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While there are many more definitions and properties to learn, these six are most important for this tutorial. To solidify these ideas with code, check out the following block. Note that for the rest of this tutorial, you’ll use &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt;, and &lt;code&gt;v3&lt;/code&gt; to name your vectors:&lt;/p&gt;
&lt;div class=&quot;codeblock mb-3 w-100&quot;&gt;
  &lt;div class=&quot;codeblock__header d-flex justify-content-between codeblock--blue&quot;&gt;
    &lt;span class=&quot;mr-2 noselect&quot;&gt;Python&lt;/span&gt;
    
    &lt;div class=&quot;noselect&quot;&gt;
      
        &lt;span class=&quot;codeblock__output-toggle&quot; title=&quot;Toggle prompts and output&quot;&gt;&lt;span class=&quot;icon baseline js-codeblock-output-on codeblock__header--icon-lower&quot;&gt;&lt;/span&gt;&lt;/span&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;div class=&quot;highlight python repl highlight--with-header&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Dimension&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(2,)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Magnitude&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1.0&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2.0&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Dot product&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1.4142135623730951&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    &lt;button class=&quot;codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only&quot; title=&quot;Copy to clipboard&quot;&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt;&lt;/button&gt;
    
      &lt;span class=&quot;small&quot;&gt;&lt;span class=&quot;icon baseline mr-1 text-success&quot;&gt;&lt;/span&gt;Copied!&lt;/span&gt;
    
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You first import &lt;code&gt;numpy&lt;/code&gt; and create the arrays &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt;, and &lt;code&gt;v3&lt;/code&gt;. Calling &lt;code&gt;v1.shape&lt;/code&gt; shows you the &lt;strong&gt;dimension&lt;/strong&gt; of &lt;code&gt;v1&lt;/code&gt;. You then see two different ways to compute the &lt;strong&gt;magnitude&lt;/strong&gt; of a NumPy array. The first, &lt;code&gt;np.sqrt(np.sum(v1**2))&lt;/code&gt;, uses the &lt;strong&gt;Euclidean norm&lt;/strong&gt; that you learned about above. The second computation uses &lt;code&gt;np.linalg.norm()&lt;/code&gt;, a NumPy function that computes the Euclidean norm of an array by default but can also compute &lt;a href=&quot;https://numpy.org/doc/stable/reference/generated/numpy.linalg.norm.html&quot;&gt;other matrix and vector norms&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, you see two ways to calculate the &lt;strong&gt;dot product&lt;/strong&gt; between two vectors. Using &lt;code&gt;np.sum(v1 * v2)&lt;/code&gt; first computes the element-wise multiplication between &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt; in a &lt;a href=&quot;https://realpython.com/numpy-array-programming/#what-is-vectorization&quot;&gt;vectorized&lt;/a&gt; fashion, and you sum the results to produce a single number. A better way to compute the dot product is to use the at-operator (&lt;code&gt;@&lt;/code&gt;), as you see with &lt;code&gt;v1 @ v3&lt;/code&gt;. This is because &lt;code&gt;@&lt;/code&gt; can perform both vector and matrix multiplications, and the syntax is cleaner.&lt;/p&gt;
&lt;p&gt;While all of these vector definitions and properties may seem straightforward to compute, you might still be wondering what they actually mean and why they’re important to understand. One way to better understand vectors is to visualize them in two dimensions. In this context, you can represent vectors as arrows, like in the following plot:&lt;/p&gt;
&lt;a href=&quot;https://files.realpython.com/media/Screenshot_2023-08-25_at_3.28.16_PM.d90eaabd67be.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block &quot; src=&quot;https://files.realpython.com/media/Screenshot_2023-08-25_at_3.28.16_PM.d90eaabd67be.png&quot; width=&quot;1014&quot; height=&quot;600&quot; alt=&quot;Vectors are often thought of as arrows in two dimensions&quot; /&gt;&lt;/a&gt;Representing vectors as arrows in two dimensions

&lt;p&gt;The above plot shows the visual representation of the vectors &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt;, and &lt;code&gt;v3&lt;/code&gt; that you worked with in the last example. The tail of each vector arrow always starts at the origin, and the tip is located at the coordinates specified by the vector. As an example, the tip of &lt;code&gt;v1&lt;/code&gt; lies at &lt;code&gt;(1, 0)&lt;/code&gt;, and the tip of &lt;code&gt;v3&lt;/code&gt; lies at roughly &lt;code&gt;(1.414, 1.414)&lt;/code&gt;. The length of each vector arrow corresponds to the magnitude that you calculated earlier.&lt;/p&gt;
&lt;p&gt;From this visual, you can make the following key inferences:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt; are unit vectors because their magnitude, given by the arrow length, is one. &lt;code&gt;v3&lt;/code&gt; isn’t a unit vector, and its magnitude is two, twice the size of &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt; are &lt;strong&gt;orthogonal&lt;/strong&gt; because their tails meet at a 90 degree angle. You see this visually but can also verify it computationally by computing the dot product between &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;. By using the dot product definition, &lt;em&gt;v1 ⋅ v2 = ||v1|| ||v2|| cos(θ)&lt;/em&gt;, you can see that when &lt;em&gt;θ = 90&lt;/em&gt;, &lt;em&gt;cos(θ) = 0&lt;/em&gt; and &lt;em&gt;v1 ⋅ v2 = 0&lt;/em&gt;. Intuitively, you can think of &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt; as being totally unrelated or having nothing to do with each other. This will become important later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v3&lt;/code&gt; makes a 45 degree angle with both &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;. This means that &lt;code&gt;v3&lt;/code&gt; will have a non-zero dot product with &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;. This also means that &lt;code&gt;v3&lt;/code&gt; is equally related to both &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;. In general, the smaller the angle between two vectors, the more they point toward a common direction. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;h2&gt;&lt;a href=&quot;https://realpython.com/chromadb-vector-database/?utm_source=realpython&amp;utm_medium=rss&quot;&gt;Read the full article at https://realpython.com/chromadb-vector-database/ »&lt;/a&gt;&lt;/h2&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 15 Nov 2023 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: Using CSS to Style a Python TUI with Textual</title>
	<guid>https://www.blog.pythonlibrary.org/2023/11/15/using-css-to-style-a-python-tui-with-textual/</guid>
	<link>https://www.blog.pythonlibrary.org/2023/11/15/using-css-to-style-a-python-tui-with-textual/</link>
	<description>&lt;p&gt;Textual is a Python framework for creating Text Based user interfaces (TUIs). You can create graphical user interfaces in your terminal with Textual.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If you haven&amp;#8217;t heard of Textual before, check out &lt;a href=&quot;https://www.blog.pythonlibrary.org/2023/03/28/an-intro-to-textual/&quot;&gt;An Intro to Textual – Creating Text User Interfaces with Python&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In this tutorial, you will learn how to create and style a form. The form won&amp;#8217;t do anything, but this tutorial teaches how to add widgets, lay them out, and then give them some style.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;If you don&amp;#8217;t have Textual yet, you must install it. Textual is not built-in to Python, so you can use pip to get it on your machine.&lt;/p&gt;
&lt;p&gt;Open up your terminal and run the following command to install Textual:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;python -m pip install textual&lt;/pre&gt;
&lt;p&gt;Now you&amp;#8217;re ready to rock!&lt;/p&gt;
&lt;h2&gt;Creating a Form in Textual&lt;/h2&gt;
&lt;p&gt;You are now ready to start coding with Textual. Open up your favorite Python editor and create a new file named &lt;strong&gt;form.py&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Then enter the following code:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;# form.py

from textual.app import App, ComposeResult
from textual.containers import Center
from textual.screen import Screen
from textual.widgets import Button, Footer, Header, Input, Static


class Form(Static):
    def compose(self) -&amp;gt; ComposeResult:
        &quot;&quot;&quot;
        Creates the main UI elements
        &quot;&quot;&quot;
        yield Input(id=&quot;first_name&quot;, placeholder=&quot;First Name&quot;)
        yield Input(id=&quot;last_name&quot;, placeholder=&quot;Last Name&quot;)
        yield Input(id=&quot;address&quot;, placeholder=&quot;Address&quot;)
        yield Input(id=&quot;city&quot;, placeholder=&quot;City&quot;)
        yield Input(id=&quot;state&quot;, placeholder=&quot;State&quot;)
        yield Input(id=&quot;zip_code&quot;, placeholder=&quot;Zip Code&quot;)
        yield Input(id=&quot;email&quot;, placeholder=&quot;email&quot;)
        with Center():
            yield Button(&quot;Save&quot;, id=&quot;save_button&quot;)


class AddressBookApp(App):
    def compose(self) -&amp;gt; ComposeResult:
        &quot;&quot;&quot;
        Lays out the main UI elemens plus a header and footer
        &quot;&quot;&quot;
        yield Header()
        yield Form()
        yield Footer()


if __name__ == &quot;__main__&quot;:
    app = AddressBookApp()
    app.run()
&lt;/pre&gt;
&lt;p&gt;Here, you import all the bits and bobs you&amp;#8217;ll need to create your form. You can use the &lt;strong&gt;Static&lt;/strong&gt; class to group together multiple widgets. Think of it as a container-widget.&lt;/p&gt;
&lt;p&gt;You create the &lt;strong&gt;Form()&lt;/strong&gt; class to contain most of your form&amp;#8217;s widgets. You will compose a series of text input widgets where users can fill in their name and address information. There is also a reference to something called &lt;strong&gt;Center()&lt;/strong&gt;, an actual container in Textual that helps you align widgets.&lt;/p&gt;
&lt;p&gt;Next, in the &lt;strong&gt;AddressBookApp&lt;/strong&gt;() class, you create a header, the form, and a footer. Now you are ready to run can run your code.&lt;/p&gt;
&lt;p&gt;Open up your terminal again and use the following command:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;python form.py&lt;/pre&gt;
&lt;p&gt;When you run your code, you will see something like the following:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-12193 size-large&quot; src=&quot;https://www.blog.pythonlibrary.org/wp-content/uploads/2023/11/original_form-1024x488.png&quot; alt=&quot;Textual form&quot; width=&quot;1024&quot; height=&quot;488&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The default colors work, but you may want to change them to give your application a different look.&lt;/p&gt;
&lt;p&gt;You will learn how to do that by using CSS!&lt;/p&gt;
&lt;h2&gt;CSS Styling&lt;/h2&gt;
&lt;p&gt;Textual supports a limited subset of CSS that you can use to style your widgets.Create a new file and name it &lt;strong&gt;form.css&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Next, add the following code:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;Input {
    background: white;
}

Button {
    background: blue;
}
&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;Input&lt;/strong&gt; parameter tells Textual to style all the widgets that are of the &lt;strong&gt;Input&lt;/strong&gt; type. In this example, you are setting the background color white.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Button&lt;/strong&gt; line item will set all the &lt;strong&gt;Button&lt;/strong&gt; widget&amp;#8217;s background color to blue. Of course, in this example, there is only one &lt;strong&gt;Button&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now you need to update your code to tell Textual that you want to load a CSS file:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;from textual.app import App, ComposeResult
from textual.containers import Center
from textual.screen import Screen
from textual.widgets import Button, Footer, Header, Input, Static


class Form(Static):
    
    def compose(self) -&amp;gt; ComposeResult:
        &quot;&quot;&quot;
        Creates the main UI elements
        &quot;&quot;&quot;
        yield Input(id=&quot;first_name&quot;, placeholder=&quot;First Name&quot;)
        yield Input(id=&quot;last_name&quot;, placeholder=&quot;Last Name&quot;)
        yield Input(id=&quot;address&quot;, placeholder=&quot;Address&quot;)
        yield Input(id=&quot;city&quot;, placeholder=&quot;City&quot;)
        yield Input(id=&quot;state&quot;, placeholder=&quot;State&quot;)
        yield Input(id=&quot;zip_code&quot;, placeholder=&quot;Zip Code&quot;)
        yield Input(id=&quot;email&quot;, placeholder=&quot;email&quot;)
        with Center():
            yield Button(&quot;Save&quot;, id=&quot;save_button&quot;)


class AddressBookApp(App):
    CSS_PATH = &quot;form.css&quot;
    
    def compose(self) -&amp;gt; ComposeResult:
        &quot;&quot;&quot;
        Lays out the main UI elemens plus a header and footer
        &quot;&quot;&quot;
        yield Header()
        yield Form()
        yield Footer()


if __name__ == &quot;__main__&quot;:
    app = AddressBookApp()
    app.run()&lt;/pre&gt;
&lt;p&gt;One-line change is all you need and that change is the first line in your &lt;strong&gt;AddressBookApp()&lt;/strong&gt; class where you set a &lt;strong&gt;CSS_PATH&lt;/strong&gt; variable. You can supply a relative or an absolute path to your CSS file here.&lt;/p&gt;
&lt;p&gt;If you want to modify the style of any of the widgets in your TUI, you only need to go into the CSS file.&lt;/p&gt;
&lt;p&gt;Try re-running the application and you&amp;#8217;ll see an immediate difference:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-large wp-image-12194&quot; src=&quot;https://www.blog.pythonlibrary.org/wp-content/uploads/2023/11/form_with_css-1024x500.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d like to be more specific about which widgets you want to style, change your CSS to the following:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;Input {
    background: white;
}

#first_name {
    background: yellow;
    color: red
}

#address {
    background: green;
}

#save_button {
    background: blue;
}&lt;/pre&gt;
&lt;p&gt;Here, you leave the &lt;strong&gt;Input&lt;/strong&gt; widgets the same but add some hash-tag items to the CSS. These hash-tagged names must match the &lt;strong&gt;id&lt;/strong&gt; you set for the individual widgets you want to style.&lt;/p&gt;
&lt;p&gt;If you specify incorrect id names, those style blocks will be ignored. In this example, you explicitly modify the &lt;strong&gt;first_name&lt;/strong&gt; and &lt;strong&gt;address&lt;/strong&gt; Input widgets. You also call out the &lt;strong&gt;save_button&lt;/strong&gt; Button,. This doesn&amp;#8217;t really change the look of the button since you didn&amp;#8217;t change the color, but if you add a second Button, it won&amp;#8217;t get any special styling.&lt;/p&gt;
&lt;p&gt;Here is what it looks like when you run it now:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-large wp-image-12207&quot; src=&quot;https://www.blog.pythonlibrary.org/wp-content/uploads/2023/11/more_colors_form-1024x500.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You may not like these colors, so feel free to try out some of your own. That&amp;#8217;s part of the fun of creating a TUI.&lt;/p&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;Now you know the basics of using CSS with your Textual applications. CSS is not my favorite way of applying styling, but this seems to work pretty well with Textual. The other nice thing about Textual is that there is a developer mode that you can enable where you can edit the CSS and watch it change the user interface live.&lt;/p&gt;
&lt;p&gt;Give Textual a try and see what you can make!&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://www.blog.pythonlibrary.org/2023/11/15/using-css-to-style-a-python-tui-with-textual/&quot;&gt;Using CSS to Style a Python TUI with Textual&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.blog.pythonlibrary.org&quot;&gt;Mouse Vs Python&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 15 Nov 2023 13:32:48 +0000</pubDate>
</item>
<item>
	<title>PyCharm: Unveiling Python 3.12: What’s New in the World of Python?</title>
	<guid>https://blog.jetbrains.com/pycharm/2023/11/python-3-12/</guid>
	<link>https://blog.jetbrains.com/pycharm/2023/11/python-3-12/</link>
	<description>&lt;p&gt;Python 3.12 made its debut on October 2, 2023, in keeping with the annual tradition of releasing new versions every October.&lt;/p&gt;



&lt;p&gt;This latest iteration introduces a range of new features and enhancements that we will delve into in this blog post. For a comprehensive list of changes, you can refer to the &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.12.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;



&lt;img width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://blog.jetbrains.com/wp-content/uploads/2023/11/Featured_1280x720-3.png&quot; alt=&quot;What's New in Python 3.12&quot; class=&quot;wp-image-405562&quot; /&gt;



&lt;span id=&quot;more-403384&quot;&gt;&lt;/span&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;F-Strings&lt;/h2&gt;



&lt;p&gt;F-strings, also known as formatted string literals, were introduced in Python 3.6, providing a straightforward and concise method for string formatting. They allow the inclusion of expressions within string literals, simplifying the creation of strings with variables, expressions, or function call results. F-strings are identified by the prefix &lt;code&gt;f&lt;/code&gt;before the string, and expressions within curly braces &lt;code&gt;{}&lt;/code&gt; are computed and substituted with their values.&lt;/p&gt;



&lt;p&gt;Due to their readability and versatility, f-strings have become the preferred choice for string formatting in Python, facilitating the creation of neatly formatted and dynamic strings in your code.&lt;/p&gt;



&lt;p&gt;Issues addressed in Python 3.12:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Flexibility to use quotes&lt;/li&gt;



&lt;li&gt;Improved handling of backslashes&lt;/li&gt;



&lt;li&gt;Refined handling of comments&lt;/li&gt;



&lt;li&gt;Enhanced support for nested f-strings&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Quotes&lt;/h3&gt;



&lt;p&gt;&lt;strong&gt;Quotes in Python 3.11&lt;/strong&gt;&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/k4fhVWtYVt5dEQpv41iOEXzJzZuMX2rWB5ApsyYuVO_JDrfIScF7M6fnE76h4s_HVDJMMjj8JSenqSOtZHGP2dEfhZTdBrBBrxQVWV8a5smMxx67rTmf-sE9--R7cHObHPh1q4r2UlxDUUxOrEYPN5E&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;&lt;strong&gt;Quotes in Python 3.12&lt;/strong&gt;&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/vqcI7AZelw545M5aqEYAFNUWej5PYG0E5lTMfV1_tjgpG8UHb7ZWv51Pw-CH4OWOgbPVFAxaqigL3a3uJ0DE3KaKy11AMjGn66qndaLhLWEtP7SQ0Fmj_8Hly-w-TBMJ1hbL9NWJaLopcKJ8Rw7Q844&quot; alt=&quot;&quot; /&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Backslashes&lt;/h3&gt;



&lt;p&gt;In Python 3.11&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/6hVl3ALCemDLSiq03j8YXA2QkMF2kMijL4cBEr_gly92x7g9C7LU6veJKvh9lRibr9ppunCDM76_V2axgsiU2PJ4raFIeuq4zwlGRbWVgysoX4dt_Y3HDOVajMNVPt0ib4DF2A7JoBrnI4bctQv68kM&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;In Python 3.12&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/2LKpNOyWK4kRiw5Yswxzn-KKBZkzU-NmCpUh7WdIqG75_feCWBUUjTBEozmqAHT_-K8guqHL4JWi6lJzzayf6K9IJVwkDXUQd8vFd-DKa8brL7vaT4OoY5uO5OK-DvSyoY24W6sXIL8BWFNSnEBN-fI&quot; alt=&quot;&quot; /&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Nested&lt;/h3&gt;



&lt;p&gt;In Python 3.11&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/XWnI0Rg82gEC1YN89wqXQRHdbsUN3EgBsUNSBXvmNbBtv1bzHfQ-08ID1kHZMNhGSbVugI-oBAZSyswicFLhiLgr2PXSojZlJWQGKALCa3RQZ6VFs8lLRrxAmzIqTghHo9hTDj37UKyLcHHI7ptY0zU&quot; alt=&quot;&quot; /&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/AJcnbb9zsOhze3Bdf1IylAhjBfN1JWXCyuFe6uOKiARaLdYR4X9s1nOfiMvYRkcOm_IO9Of1YJOCt8OVGP4_LsaFYub9aQFy--jjR_aK2_mXrnNwkQeKcIUkqge9sO6hHt8aRgxf-I-AfMEn0AN3NiY&quot; alt=&quot;&quot; /&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Comments&lt;/h3&gt;



&lt;p&gt;In Python 3.11&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/h-bmKHebVDCNQmX0TaVmUhlsRxQvKhU2YqPLlJkoa0FaRqUPOiSyq1M4avQoSJOG-D9q9m7IPpn_h3iUJ1qnqq-G6LriQsvyKHpg-HB5zT3kG-aAzQiyd8RPfcd3kiHdjp_YEqt_5qdjCoMf24dzWBM&quot; alt=&quot;&quot; /&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/J3htgZd_wqfiJSeqpQK6iZCtoM_gnWae9Uyx8WUaV_d_nRi2-TaLWflUKd3JNToBWGWzulrAPNImJWQzuLqKErXh-wsbfdjhOFhhY-so3f_IRuPN-yePhkOh2kloUMKMHmxzUQHy-5SVGbhKht9xJxo&quot; alt=&quot;&quot; /&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Error Messages&lt;/h2&gt;



&lt;p&gt;Python 3.12 has made significant enhancements in error messages compared to previous versions. While prior updates improved error messages, with the introduction of a PEG parser in Python 3.9 and “did you mean” semantics in Python 3.10, this release introduces further improvements:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;stdlib&lt;/code&gt; as a source of places for “did you mean”&lt;/li&gt;



&lt;li&gt;Class member “did you mean”&lt;/li&gt;



&lt;li&gt;Import from syntax error “did you mean”&lt;/li&gt;



&lt;li&gt;Import names “did you mean”&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Another notable improvement is the increased intelligence of error messages when dealing with common developer mistakes. For example, the error message explicitly recommends the correct approach.&lt;/p&gt;



&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;import a.y.z from b.y.z

Traceback (most recent call last):

&amp;nbsp;&amp;nbsp;File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;import a.y.z from b.y.z

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;^^^^^^^^^^^^^^^^^^^^^^^

SyntaxError: Did you mean to use &amp;#039;from ... import ...&amp;#039; instead?&lt;/pre&gt;



&lt;p&gt;Additionally, Python 3.12&amp;#8217;s error messages are more astute in recognizing instances where you reference an object&amp;#8217;s attribute but don’t include the &lt;code&gt;self&lt;/code&gt; prefix.&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/Jpmav1eCkOqZDXD9NmQZQsl0dXUi_2P2v_q84L_DRWzYkfnPVqNsR9L2o_BrZSbMHrNB8nOGs20RmAA9XV-QhcNaJZJtXYpySsgqGtWEITue2qriOlcaLO1ohDYMXhN3_XtLKksT5O7KpBTSrfWK6X8&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;If you use PyCharm, you probably won&amp;#8217;t see much of a change, since the IDE handled such errors and provided a quick-fix suggestion even before running a script.&lt;/p&gt;



&lt;p&gt;In the past, the check was limited to the built-ins, but it now includes support for the standard library.&lt;/p&gt;



&lt;p&gt;Lastly, when you encounter an import error and receive an exception while trying to import something from a module, Python 3.12 automatically suggests potential corrections. These enhancements collectively contribute to a significantly improved coding experience in Python.&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/LIexVIZnC_GqvdCNbYVvt8vSTxENcEMHZiYDvC5pXxcM-da2TGWR_IQfz3BFafRBJB-BhRRIREs2u5FnIqz8QNaz4qEMH_IY8iJBZYQnFVBe1Xk3mf1Y2uWz80cTvWylPcqYq1_OhtRJyhTUBGrPOCQ&quot; alt=&quot;&quot; /&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Improvements in Type Annotations&lt;/h2&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;PEP 698 Override Decorator&lt;/h3&gt;



&lt;p&gt;In this PEP, the suggestion is to introduce an &lt;code&gt;@override&lt;/code&gt; decorator to Python&amp;#8217;s type system. This addition aims to empower type checkers to proactively identify and prevent a specific category of errors arising when a base class modifies methods inherited by its derived classes.&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/NpyWSwTOmGjZXjBYPHkHlYyk9s0Q0VNdcZ3jQNCMWfTR0kdXBEBpdyri8kD8cxZ0T38Tks9qhiGInR4Sx4QXIsAvCYT3FY4r3QHZlTGHFOBH8Ak6GNuRrHiE-DZJPfauUda-WLJv92hsfd5g5s3pmJc&quot; alt=&quot;&quot; /&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;PEP 695 Generic Types&lt;/h3&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/8-uqukqJD1Qv9RhCcQwStJ5M5gYaY3nReLcmAFV-Gx0zm8LWzAf54RcgLtagjsEKFJkcz8pCPkWnXf-WGWFsjPLMHnUxLQuorFHKA7mYFcwX2ziGAHdCVPkyHXw3__cb7e-5civhIvp66kGUg8EqS2k&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;Previously, we used to define generics using &lt;code&gt;TypeVar&lt;/code&gt; syntax. &lt;code&gt;TypeVar&lt;/code&gt; is a feature of the Python type hinting system that allows you to create a placeholder for a type that will be specified later when a function or class is used. It is primarily used to indicate that a particular type can be of any type, providing flexibility and generic type annotations in Python.&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/x5MFL0XWS3bS2zD87PYdpTjuH5pCmbb1f0qXQjQ3CVHWFI1TDUuoYE7OU142n6GNUS1uvbE7FhQ7MAfIknZXwg26NlDZUOG_0ORg_0kN7cJCq45xZ2coay1jWNhRFGxhitpEp5-mbZYKiRkpxHRnXdE&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;In Python 3.12, this has become much simpler.&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/kKnb130PEPqvaznxUeUiK4wIkq2xiz1nBT7LBEgARzPAiKlrWzAnFQBg0EB9ER5NtnR0_LL408VsFTscbEuqL5cW0O2rcU2lH7wuVvFKLmMfSVgmHJv1kOVXwbeCZqPa9VCPyrd8uXTqrU4a7VB2o5Y&quot; alt=&quot;&quot; /&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/PI4_V_aqG9wChibCF-yTW8Ljh_YdaSNRhNJsyNvoFmLYUV3gxkOyJVQXASGyVuH4Pfk45VzQYUptMIeCgX5-gPtjxZg9evbhDqYL6g30cXLdFixc98U0OSG_NpqX5vUd1X1wUulLvHWCNbwhIUqLYWo&quot; alt=&quot;&quot; /&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/38IvOJbUePpyWQXogeQEUjIiExNCSomyhvu7ubTVC91t80L5lA-J0UnV0fSCJ-jHrmMxKJN2vaWL530kWkI7cNglTjACH_YAklb3ClJvEjALtsEmzwi5731icHMpVtLU-hs7YbhY6b1g6AMxKxS4fOI&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;You can also extend it to classes.&lt;/p&gt;



&lt;p&gt;Previously we used &lt;code&gt;TypeVar&lt;/code&gt;.&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/B9VudlnmN82nH23veDSA1hLIuEM_bt990ITQvPLhargHi5XZblc1-6ctpRfALTeZz8WqDRIYzG_DzDaEa9TXg9hnQUHE_i_iuwEpudbz7y100xakPs-s4CLLRSN96f8Im3bcaKzeA6HmWPknQfisd-0&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;Now, in Python 3.12,  it is not necessary:&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/wYPqYTQhQnRaplr_OxhsrQexxFExgqPzW9IGPTwk7fTEmy_KqZY3tcByicntRmu21obrjDDPgN50i2TQU7SLwFC34T0Woy1hgvJcJKglX0MGQ69RqSu2BNRRbYJizpIcK5RGQs0TTldQDinuThn_ug8&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;Use the type keyword to define your own aliases.&lt;/p&gt;



&lt;p&gt;Previously, we used &lt;code&gt;TypeAlias&lt;/code&gt; from the &lt;code&gt;typing&lt;/code&gt; module.&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/Ji0sdIXKzW5rFiHF_bZOn2NVVyzkr30jh7V6VZUN8LlI5qU0tVrMyYGu4o3Mid4YizbyhV85ipqWyohlte6mEO3hVkN_zIQJv0epg27vQPX-YbaoEe9rHcVyL-Q0BZkQd9GMHD98hTbitTcAsx93LI0&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;Now, in Python 3.12&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/oAeTROmKe5Q9HXsm3Agu4if9MN2GHRA58OOPVO2TAiyam13RGkatwz0LJbpBwh6KZY0AsM1XxlOXeXichV0yMKE78ix6GxT7L7fuj-5jRj4jHNV611XU10X_ruJRhX-0fSOj2hlFobBNPqaeeLoi2Zc&quot; alt=&quot;&quot; /&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;PEP 709 Comprehension Inlining&lt;/h2&gt;



&lt;p&gt;In the past, dictionary, list, and set comprehensions were defined using a mechanism that involved creating functions. Essentially, the contents of comprehension were compiled into a separate function, which was then instantiated and immediately executed. This process incurred some overhead because it required the creation of a function object and the establishment of a stack frame when the function was called.&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/J-qL8fp4Qr-OL4sgNucImKJEuJCYpLUnJJQQ7TpW0NYCao-PJb3QH8DNoqDrAirr1Mg18ysrm4aqwIAyPzWeLTCUiG4H7YMovuMJ9466oEjsGN_WmsqmpyA1ctDTe0oYbsKSwnXQ3dtowNPgVziifY0&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;However, the implementation has been changed. Dictionary, list, and set comprehensions no longer rely on functions in the background. Instead, all comprehensions are now compiled directly within the context of the current function.&lt;/p&gt;



&lt;p&gt;The comprehension&amp;#8217;s bytecode is contained within an individual code object. Whenever &lt;code&gt;inline_comprehension()&lt;/code&gt; is invoked, a new temporary function object is created via &lt;code&gt;MAKE_FUNCTION&lt;/code&gt;, executed (resulting in the establishment and subsequent removal of a new frame on the Python stack), and promptly discarded.&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/ESOlX-jVXDfUosi_bJmfRZIbPZxzBeag5ejaKEQr2V5_OyFe_K49BooyZx6fXn5y2PNq6RyntUbTuKdG0LezxFVyVqjdPc4zF_y6a94630w7CsrAZh9dhhxhZW5jfzuRl7arFXEkfyctYteXR0pioZw&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;Python 3.12&lt;/p&gt;



&lt;img src=&quot;https://lh7-us.googleusercontent.com/0Bu-lF8grrpHdX-7T0XgRgmsRB0GdQqIGBjcnfqUXH098kzpwDnlt-4awYheeVw97XvpICD4yFzJ6XPHAd8nopLk7Dl42IfyvCoOmyxmd4zSFtF-yj2JwofHsQ8rX0cILANeJkrlL3WEFMxgTf5gELI&quot; alt=&quot;&quot; /&gt;



&lt;p&gt;This alteration means that there is no longer a separate stack frame associated with the comprehension.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;PEP 684 Per Interpreter GIL&lt;/h2&gt;



&lt;p&gt;If you’d like to learn more about the Global Interpreter Lock (GIL), watch this video where Guido discusses the Global Interpreter Lock and subinterpreters.&lt;/p&gt;



&lt;div class=&quot;wp-block-embed__wrapper&quot;&gt;

&lt;/div&gt;



&lt;p&gt;Python operates as an interpreted language, setting it apart from compiled languages that employ compilers to convert code into machine language. In contrast, Python reads and executes instructions directly within its interpreter. Performance enhancements in Python releases often translate to improvements in the CPython interpreter.&lt;/p&gt;



&lt;p&gt;When you execute a Python program using CPython, it creates an interpreter instance. The initial instance is called the main interpreter and it is capable of generating subinterpreters. Most aspects of subinterpreters are distinct from one another, but not entirely. This subinterpreter concept isn&amp;#8217;t new and has existed since Python 1.5, although it typically operates beneath the language&amp;#8217;s surface.&lt;/p&gt;



&lt;p&gt;Handling parallel execution can be tricky, especially when multiple processes attempt to modify a single value simultaneously, leading to consistency issues. Python employs the Global Interpreter Lock to mitigate such problems, but it’s been a source of frustration for developers seeking to write parallel code.&lt;/p&gt;



&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;interp = interpreters.create()

print(&amp;#039;before&amp;#039;)

interp.run(&amp;#039;print(&amp;quot;during&amp;quot;)&amp;#039;)

print(&amp;#039;after&amp;#039;)&lt;/pre&gt;



&lt;p&gt;Efforts are underway to minimize the GIL&amp;#8217;s impact and potentially eliminate it.&amp;nbsp;&lt;/p&gt;



&lt;p&gt;PEP 684 and PEP 554 impact the structure of subinterpreters. PEP 684 relocates the GIL from the global level to a subinterpreter level, while PEP 554 is focused on enabling the fundamental capability of multiple interpreters, isolated from each other, in the same Python process.&lt;/p&gt;



&lt;p&gt;It&amp;#8217;s crucial to understand that these adjustments are largely behind the scenes, and Python users will not encounter them directly until Python 3.13 is released.&lt;/p&gt;



&lt;p&gt;To learn more about PEP 684, visit &lt;a href=&quot;https://peps.python.org/pep-0684/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://peps.python.org/pep-0684/&lt;/a&gt;&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;PEP 669 Low Impact Monitoring&lt;/h2&gt;



&lt;p&gt;&lt;em&gt;PyCharm has added initial support for debugging based on PEP 669, improving overall debugger performance and making functionality such as tracing of raised exceptions and dropping into the debugger on a failed test almost penalty-less compared with the old &lt;code&gt;sys.settrace&lt;/code&gt; based approach.&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;Credits: &lt;a href=&quot;https://www.youtube.com/@mCoding&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mCoding&lt;/a&gt;&lt;/p&gt;



&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;import sys

def my_trace_call(code, instruction_offset, call, arg0):

&amp;nbsp;&amp;nbsp;&amp;nbsp;print(&amp;quot;Event: call&amp;quot;)

def my_trace_line(code, line_number):

&amp;nbsp;&amp;nbsp;&amp;nbsp;print(&amp;quot;Event: line&amp;quot;)

def setup_monitoring():

&amp;nbsp;&amp;nbsp;&amp;nbsp;mo = sys.monitoring

&amp;nbsp;&amp;nbsp;&amp;nbsp;events = mo.events

&amp;nbsp;&amp;nbsp;&amp;nbsp;mo.use_tool_id(0, &amp;quot;my_debugger&amp;quot;)

&amp;nbsp;&amp;nbsp;&amp;nbsp;mo.set_events(0, events.CALL | events.LINE)

&amp;nbsp;&amp;nbsp;&amp;nbsp;mo.register_callback(0, events.CALL, my_trace_call)

&amp;nbsp;&amp;nbsp;&amp;nbsp;mo.register_callback(0, events.LINE, my_trace_line)

def main():

&amp;nbsp;&amp;nbsp;&amp;nbsp;for x in range(5):

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;print(x)

if __name__ == &amp;quot;__main__&amp;quot;:

&amp;nbsp;&amp;nbsp;&amp;nbsp;setup_monitoring()

&amp;nbsp;&amp;nbsp;&amp;nbsp;main()&lt;/pre&gt;



&lt;p&gt;In the past, Python debuggers used &lt;code&gt;sys.settrace&lt;/code&gt;, which offered essentially the same functionality but in a less efficient manner. The new &lt;code&gt;sys.monitoring&lt;/code&gt; namespace introduces a streamlined API for event registration, and its implementation details enable it to leverage the ongoing efforts to specialize instructions at runtime.&lt;/p&gt;



&lt;p&gt;To know more about PEP 669 &lt;a href=&quot;https://peps.python.org/pep-0669/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://peps.python.org/pep-0669/&lt;/a&gt;&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;PEP 683 Immortal Objects&lt;/h2&gt;



&lt;p&gt;Meta, the company behind Instagram, utilizes Python (Django) for its front-end server. They implement a multi-process architecture with &lt;code&gt;asyncio&lt;/code&gt; to handle parallelism. However, the high scale of operations and request volume can lead to memory inefficiency issues. To address this, they employ a pre-fork web server architecture to cache objects in shared memory, reducing private memory usage.&lt;/p&gt;



&lt;p&gt;Upon closer examination, they found that the private memory of processes increased over time, while shared memory decreased. This issue was caused by Python objects, which although mostly immutable, still underwent modifications through reference counts and garbage collection (GC) operations, triggering a copy-on-write mechanism in server processes.&lt;/p&gt;



&lt;p&gt;To resolve this problem, they introduced &lt;em&gt;Immortal Objects&lt;/em&gt; (PEP-683), marking objects as truly immutable. This approach ensures that the reference count and GC header remain unchanged, reducing memory overhead.&lt;/p&gt;



&lt;p&gt;To learn more about Immortal Objects, read the Meta Engineering Blog &lt;a href=&quot;https://engineering.fb.com/2023/08/15/developer-tools/immortal-objects-for-python-instagram-meta/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://engineering.fb.com/2023/08/15/developer-tools/immortal-objects-for-python-instagram-meta/&lt;/a&gt;&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Linux Perf Profiler&lt;/h2&gt;



&lt;p&gt;A profiler serves as a valuable instrument for observing and diagnosing the efficiency of your scripts and programs. Profiling your code allows you to obtain precise measurements, which can be utilized to refine your implementation.&lt;/p&gt;



&lt;p&gt;Python has a history of supporting profiling through standard library tools such as &lt;code&gt;timeit&lt;/code&gt;, &lt;code&gt;cProfile&lt;/code&gt;, and &lt;code&gt;memray&lt;/code&gt; from Bloomberg. Furthermore, there are third-party alternatives that provide more functionality.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;Linux perf&lt;/em&gt; is a profiling and performance analysis tool that is integrated into the Linux kernel. It provides a wide range of features and capabilities for monitoring and analyzing the performance of a Linux system. &lt;em&gt;Linux perf&lt;/em&gt; is a powerful utility that allows you to collect and analyze data on various aspects of system behavior, such as CPU utilization, memory usage, hardware events, and more. Some of its key features include:&lt;/p&gt;



&lt;p&gt;1. &lt;strong&gt;CPU Profiling&lt;/strong&gt;: &lt;em&gt;Linux perf&lt;/em&gt; can be used to profile CPU usage, helping you identify hotspots in your code and understand how CPU time is distributed among different processes and functions.&lt;/p&gt;



&lt;p&gt;2. &lt;strong&gt;Hardware Events&lt;/strong&gt;:&amp;nbsp;It can collect data on hardware events like cache misses, branch mispredictions, and instruction counts, which is valuable for optimizing code and understanding the impact of hardware on performance.&lt;/p&gt;



&lt;p&gt;3. &lt;strong&gt;System-wide Profiling&lt;/strong&gt;: &lt;em&gt;Linux perf &lt;/em&gt;can capture system-wide data, enabling you to analyze the performance of all running processes and system components simultaneously.&lt;/p&gt;



&lt;p&gt;4. &lt;strong&gt;Kernel Profiling&lt;/strong&gt;: You can use &lt;em&gt;Linux perf &lt;/em&gt;to analyze the performance of the Linux kernel itself, helping you pinpoint kernel-level bottlenecks and issues.&lt;/p&gt;



&lt;p&gt;5. &lt;strong&gt;Tracing&lt;/strong&gt;: It supports dynamic tracing of kernel and user-space events, allowing you to trace the execution of specific programs or system calls.&lt;/p&gt;



&lt;p&gt;6. &lt;strong&gt;Performance Counters&lt;/strong&gt;: &lt;em&gt;Linux perf&lt;/em&gt; can access the performance monitoring counters available in modern CPUs, providing detailed information about processor behavior.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;Linux perf&lt;/em&gt; is a versatile tool that is commonly used by developers, system administrators, and performance analysts to optimize software and diagnose performance problems on Linux systems. It provides a wealth of information that can help improve the efficiency and performance of applications and the overall system.&lt;/p&gt;



&lt;p&gt;This &lt;a href=&quot;https://www.petermcconnell.com/posts/perf_eng_with_py12/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;article&lt;/a&gt;, authored by Peter McConnell, explores the use of performance engineering with Python 3.12. It begins by introducing the &lt;em&gt;Linux perf&lt;/em&gt; tool and the FlameGraph visualization tool. The goal is to reduce the runtime of a Python script from 36 seconds to 0.8 seconds, emphasizing the importance of Python 3.12&amp;#8217;s performance profiling support.&lt;/p&gt;



&lt;p&gt;The article explores the use of environment variables to enable perf support and repeats the profiling process with Python 3.12, generating an improved FlameGraph. The source code responsible for the performance issue is examined.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Summary&lt;/h2&gt;



&lt;p&gt;&lt;em&gt;Python 3.12 comes with a bunch of welcome ergonomics improvements. Declaring generic classes, functions, and type aliases for type hinting is now as straightforward as in many statically typed languages with first-class syntactic support provided by PEP 695. Already universally loved f-strings are now even easier to use thanks to former grammar restrictions, such as preventing re-using quotes and including escape sequences inside them, being lifted in PEP 701. Low overhead debugging features make using a debugger by default for all development tasks a no-brainer. Apart from that, there are new typing features, various performance improvements, and new standard library APIs.&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;Explore the capabilities of Python 3.12 with PyCharm 2023.3, now available in the Early Access Program (EAP). This version introduces a swifter debugging experience and enhanced code assistance tailored to Python 3.12’s new typing features. Unlock the potential of the new language features with the tool designed for it.&lt;/p&gt;



&lt;p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a class=&quot;jb-download-button&quot; href=&quot;https://www.jetbrains.com/pycharm/nextversion/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Try PyCharm 2023.3 EAP&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;



&lt;p&gt;Learn more about Python 3.12 Support in PyCharm:  &lt;a href=&quot;https://blog.jetbrains.com/pycharm/2023/10/2023-3-eap-2/&quot;&gt;https://blog.jetbrains.com/pycharm/2023/10/2023-3-eap-2/&lt;/a&gt;. &lt;/p&gt;



&lt;p&gt;For a detailed exploration of additional features, please refer to the official documentation at &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.12.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.python.org/3/whatsnew/3.12.html&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 15 Nov 2023 11:15:16 +0000</pubDate>
</item>
<item>
	<title>Python Software Foundation: It's time for our annual year-end PSF fundraiser and membership drive 🎉</title>
	<guid>https://pyfound.blogspot.com/2023/11/support-python-q4-2023.html</guid>
	<link>https://pyfound.blogspot.com/2023/11/support-python-q4-2023.html</link>
	<description>&lt;h1&gt;&lt;/h1&gt;&lt;h2&gt;Support Python in 2023!&lt;/h2&gt;&lt;h2&gt;&amp;nbsp;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a class=&quot;hoverZoomLink&quot; href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgz4n9OOGDNxxKBpoZ49U5yr28pNEYhm-zKvNRjs8Wo0JD6BrBKuAy5tR5Y3n-yNlSNPH3WSUbjHxYcw5mjOOm4mvjmQQfg8sOREJO9FpcdqmsUNKGQPZKclay1keOmzwgLczwGd5xtqDHUXfvECKTPEmZlX5K3lnUZGhW5-ONkZcciZb3hcw/s1200/Facebook_1200x630.png&quot;&gt;&lt;img border=&quot;0&quot; class=&quot;hoverZoomLink&quot; height=&quot;210&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgz4n9OOGDNxxKBpoZ49U5yr28pNEYhm-zKvNRjs8Wo0JD6BrBKuAy5tR5Y3n-yNlSNPH3WSUbjHxYcw5mjOOm4mvjmQQfg8sOREJO9FpcdqmsUNKGQPZKclay1keOmzwgLczwGd5xtqDHUXfvECKTPEmZlX5K3lnUZGhW5-ONkZcciZb3hcw/w400-h210/Facebook_1200x630.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;/h3&gt;For the fifth year in a row, the PSF is partnering with &lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;JetBrains&lt;/a&gt; on our end-of-year fundraiser. Over that time, the partnership has raised a total of over $95,000. Amazing! Thank you, JetBrains, for all your support.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;&lt;span&gt;There are three ways to join in the drive this year:&lt;/span&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;https://lp.jetbrains.com/support-python/&quot;&gt;&lt;b&gt;Save on PyCharm!&lt;/b&gt;&lt;/a&gt;&lt;/span&gt; JetBrains is once again supporting the PSF by providing a 30% discount on PyCharm and all proceeds will go to the PSF! You can take advantage of this discount by &lt;a href=&quot;https://lp.jetbrains.com/support-python/&quot;&gt;clicking the button on the page linked here&lt;/a&gt;, and the discount will be automatically applied when you check out. The promotion will only be available through November 27th, so go grab the deal today!&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;https://psfmember.org/civicrm/contribute/transact/?reset=1&amp;id=49&quot;&gt;&lt;b&gt;Donate directly to the PSF!&lt;/b&gt;&lt;/a&gt; &lt;/span&gt;Every dollar makes a difference. (Does every dollar also make a puppy’s tail wag? We make no promises, but may you should try, just in case? 🐶)&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://psfmember.org/&quot;&gt;&lt;b&gt;&lt;span&gt;Become a member!&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; Sign up as a Supporting member of the PSF. Be a part of the PSF, and help us sustain what we do with your annual support.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Or, heck, why not do all three? 🥳&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;span&gt;&lt;b&gt;Your Donations:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Keep Python thriving &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Invest directly in CPython and PyPI progress&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Bring the global Python community together&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Make our community more diverse and robust every year&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Let’s take a look back on 2023:&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;PyCon US&lt;/b&gt; - We held our &lt;a href=&quot;https://us.pycon.org/2023/&quot;&gt;20th PyCon US&lt;/a&gt;, in Salt Lake City and online, which was an exhilarating success! For the online component, PyCon US OX, we added two moderated online hallway tracks (in Spanish and English) and saw a 33% increase in virtual engagement. It was great to see everyone again in 2023, and we’re grateful to all the speakers, volunteers, attendees, and sponsors who made it such a special event.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Security Developer in Residence&lt;/b&gt; - Seth Larson joined the PSF earlier this year as our first ever Security Developer-in-Residence. Seth is already well-known to the Python community – he was named a PSF Fellow in 2022 and has already written a lot about Python and security on &lt;a href=&quot;https://sethmlarson.dev/blog&quot;&gt;his blog&lt;/a&gt;. This critical role would not be possible without funding from the OpenSSF &lt;a href=&quot;https://alpha-omega.dev/&quot;&gt;Alpha-Omega Project&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;PyPI Safety &amp;amp; Security Engineer &lt;/b&gt;- Mike Fiedler joined the PSF earlier this year as our first ever PyPI Safety &amp;amp; Security Engineer. Mike is already a dedicated member of the Python packaging community – he has been a Python user for some 15 years, maintains and contributes to open source, and became a PyPI Maintainer in 2022. You can see some of what he's achieved for PyPI already on the &lt;a href=&quot;https://blog.pypi.org/&quot;&gt;PyPI blog&lt;/a&gt;. This critical role would not be possible without funding from &lt;a href=&quot;https://aws.amazon.com/opensource/&quot;&gt;AWS&lt;/a&gt;.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;Welcome, Marisa and Marie!&lt;/b&gt; - In 2023 we were able to add two new full time staff members to the PSF. Marisa Comacho joined as Community Events Manager and &lt;a href=&quot;https://pyfound.blogspot.com/2023/10/announcing-community-communications-mgr.html&quot;&gt;Marie Nordin joined&lt;/a&gt; as Community Communications Manager. We are excited to add two full time dedicated staff members to the PSF to support PyCon US, our communications, and the community as a whole. &amp;nbsp;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;CPython Developer in Residence&lt;/b&gt; - Our CPython Developer in Residence, Łukasz Langa, continued to provide trusted support and advancement of the Python language, including oversight for the releases of Python 3.8 and 3.9, adoption of Sigstore, and stewardship of PEP 703 (to name a few of many!). Łukasz also engaged with the community by orchestrating the &lt;a href=&quot;https://us.pycon.org/2023/events/language-summit/&quot;&gt;Python Language Summit&lt;/a&gt; and participating in events such as &lt;a href=&quot;https://us.pycon.org/2023/&quot;&gt;PyCon US 2023&lt;/a&gt;, &lt;a href=&quot;https://ep2023.europython.eu/&quot;&gt;EuroPython&lt;/a&gt;, and &lt;a href=&quot;https://2023.pycon.co/&quot;&gt;PyCon Colombia&lt;/a&gt;. This critical role would not be possible without funding from &lt;a href=&quot;https://about.facebook.com/meta/&quot;&gt;Meta&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Authorized as CVE Numbering Authority (CNA)&lt;/b&gt; - Being authorized as a CNA is one milestone in the Python Software Foundation's strategy to improve the vulnerability response processes of critical projects in the Python ecosystem. The &lt;a href=&quot;https://www.cve.org/PartnerInformation/ListofPartners/partner/PSF&quot;&gt;Python Software Foundation CNA scope&lt;/a&gt; covers &lt;a href=&quot;https://github.com/python/cpython&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;https://github.com/pypa/pip&quot;&gt;pip&lt;/a&gt;, two projects which are fundamental to the rest of Python ecosystem.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;Five new Fiscal Sponsorees&lt;/b&gt; - Welcome to &lt;a href=&quot;https://github.com/PyCQA/bandit&quot;&gt;Bandit&lt;/a&gt;, &lt;a href=&quot;https://www.bapya.org/&quot;&gt;BaPya&lt;/a&gt;, &lt;a href=&quot;https://twisted.org/&quot;&gt;Twisted&lt;/a&gt;, &lt;a href=&quot;https://www.pyohio.org/2023/&quot;&gt;PyOhio&lt;/a&gt;, and &lt;a href=&quot;https://2023.northbaypython.org/&quot;&gt;North Bay Python&lt;/a&gt; as new Fiscal Sponsorees of the PSF! The PSF provides 501(c)(3) tax-exempt status to fiscal sponsorees and provides back office support so they can focus on their missions.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;div class=&quot;separator&quot;&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a class=&quot;hoverZoomLink&quot; href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi5EX0yXqOYNuAGcsuRsJX2wp9TzgU6azoLrCDh9utYsik4eyzjknOM_iUB32yQpkdfpIQlOs5USdc5jxI7J4t_X5Ph55VJSTlWJfqi-4U4NDIwL1lff1s-19VLv-ida4AWNw9-eMz14fdejA74vJzpbLginaeR34p7ydwgVd9LEfBcOmxOxg/s1139/fundraiser_membership_drive_small.png&quot;&gt;&lt;img border=&quot;0&quot; class=&quot;hoverZoomLink&quot; height=&quot;203&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi5EX0yXqOYNuAGcsuRsJX2wp9TzgU6azoLrCDh9utYsik4eyzjknOM_iUB32yQpkdfpIQlOs5USdc5jxI7J4t_X5Ph55VJSTlWJfqi-4U4NDIwL1lff1s-19VLv-ida4AWNw9-eMz14fdejA74vJzpbLginaeR34p7ydwgVd9LEfBcOmxOxg/w400-h203/fundraiser_membership_drive_small.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;&lt;span&gt;Our Thanks:&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Thank you for being a part of this drive and of the Python community! Keep an eye on this space and on our social media in the coming weeks for updates on the drive and the PSF 👀&lt;br /&gt;&lt;b&gt;&lt;i&gt;&amp;nbsp;&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;Your support means the world to us. We’re incredibly grateful to be in community with you! &lt;/i&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Wed, 15 Nov 2023 10:30:00 +0000</pubDate>
</item>
<item>
	<title>PyCharm: PyCharm 2023.3 EAP 6 Is Out!</title>
	<guid>https://blog.jetbrains.com/pycharm/2023/11/2023-3-eap-6/</guid>
	<link>https://blog.jetbrains.com/pycharm/2023/11/2023-3-eap-6/</link>
	<description>&lt;p&gt;You can download the build from our&amp;nbsp;&lt;a href=&quot;https://www.jetbrains.com/pycharm/nextversion/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;website&lt;/a&gt;, get it from the free&amp;nbsp;&lt;a href=&quot;https://www.jetbrains.com/toolbox-app/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Toolbox App&lt;/a&gt;, or update to it using snaps if you’re an Ubuntu user.&lt;/p&gt;



&lt;img width=&quot;2560&quot; height=&quot;1440&quot; src=&quot;https://blog.jetbrains.com/wp-content/uploads/2023/09/Blog_Featured_image_1280x720_PyCharm-2x.png&quot; alt=&quot;&quot; class=&quot;wp-image-391623&quot; /&gt;


&lt;p align=&quot;center&quot;&gt;&lt;a class=&quot;jb-download-button&quot; href=&quot;https://www.jetbrains.com/pycharm/nextversion/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Download PyCharm 2023.3 EAP&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;/p&gt;



&lt;p&gt;The sixth build of the Early Access Program for PyCharm 2023.3 brings improvements to:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Support for Type Parameter Syntax (PEP 695).&lt;/li&gt;



&lt;li&gt;&lt;em&gt;Django Structure&lt;/em&gt; view.&lt;/li&gt;



&lt;li&gt;Django Live Preview.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;These are the most important updates for this build. For the full list of changes in this EAP build, read the &lt;a href=&quot;https://youtrack.jetbrains.com/articles/PY-A-233538145/PyCharm-2023.3-EAP-6-233.11799.20-build-Release-Notes&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;We’re dedicated to giving you the best possible experience, and your feedback is vital. If you find any bugs, please report them via our&amp;nbsp;&lt;a href=&quot;https://youtrack.jetbrains.com/issues/PY&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;issue tracker&lt;/a&gt;. And if you have any questions or comments, feel free to share them in the comments below or get in touch with us on&amp;nbsp;&lt;a href=&quot;https://twitter.com/pycharm&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;X (formerly Twitter)&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 14 Nov 2023 19:57:42 +0000</pubDate>
</item>
<item>
	<title>PyCoder’s Weekly: Issue #603 (Nov. 14, 2023)</title>
	<guid>https://pycoders.com/issues/603</guid>
	<link>https://pycoders.com/issues/603</link>
	<description>&lt;p&gt; &lt;span&gt;#603 – NOVEMBER 14, 2023&lt;/span&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/issues/603/feed&quot;&gt;View in Browser »&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com&quot;&gt;&lt;img alt=&quot;The PyCoder&amp;rsquo;s Weekly Logo&quot; src=&quot;https://cdn.pycoders.com/37bdf31dc645f968ffb90196e5d38ff5&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;hr /&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11765/feed&quot; target=&quot;_blank&quot;&gt;SciPy Builds on Windows Are a Minor Miracle&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Moving SciPy to Meson meant finding a different Fortran compiler on Windows, which was particularly tricky to pull off for conda-forge. This blog tells the story about how things looked pretty grim for the Python 3.12 release, and how things ended up working out just in the nick of time. Associated &lt;a href=&quot;https://pycoders.com/link/11781/feed&quot; target=&quot;_blank&quot;&gt;HN discussion&lt;/a&gt;.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11765/feed&quot; target=&quot;_blank&quot;&gt;ALEX OBERMEIER&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11773/feed&quot; target=&quot;_blank&quot;&gt;An Unbiased Evaluation of Environment and Packaging Tools&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; This detailed article covers the wide world of packaging in Python, how the different tools overlap, and how each has its own area of specialization. A great deep dive on all the choices out there that can help you pick the right tool for your project.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11773/feed&quot; target=&quot;_blank&quot;&gt;ANNA-LENA POPKES&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11753/feed&quot; target=&quot;_blank&quot;&gt;Automate LLM Backend Deployments Using Infrastructure as Code&lt;/a&gt;&lt;/h3&gt; &lt;a href=&quot;https://pycoders.com/link/11753/feed&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.pycoders.com/2f20bd59e87591f1803e5bd91233348f&quot; alt=&quot;alt&quot; /&gt;&lt;/a&gt; &lt;p&gt; New GitHub project to provision, update, and destroy the cloud infrastructure for a LLM backend using infrastructure as code (Python). Deployment options include deploying &lt;a href=&quot;https://pycoders.com/link/11753/feed&quot; target=&quot;_blank&quot;&gt;Hugging Face models to Docker (local), Runpod, and Azure →&lt;/a&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11753/feed&quot; target=&quot;_blank&quot;&gt;PULUMI&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11779/feed&quot; target=&quot;_blank&quot;&gt;Document Your Python Code and Projects With ChatGPT&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Good documentation is a critical feature of any successful Python project. In practice, writing documentation is hard and can take a lot of time and effort. Nowadays, with tools like ChatGPT, you can quickly document your Python code and projects.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11779/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11761/feed&quot; target=&quot;_blank&quot;&gt;PSF Receives &amp;ldquo;Wonderfully Welcoming Award&amp;rdquo; From GitHub!&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11761/feed&quot; target=&quot;_blank&quot;&gt;PYTHON SOFTWARE FOUNDATION&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Discussions&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11774/feed&quot; target=&quot;_blank&quot;&gt;Idea: Return a NamedTuple&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11774/feed&quot; target=&quot;_blank&quot;&gt;PYTHON.ORG&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Articles &amp;amp; Tutorials&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11754/feed&quot; target=&quot;_blank&quot;&gt;Python Errors as Values&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Error handling can be done in a variety of ways, and this article discusses why one organization decided to use returned error values instead of exceptions. Along the way, you&amp;rsquo;ll see comparisons between Python, Go, and Rust to better understand the different mechanisms.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11754/feed&quot; target=&quot;_blank&quot;&gt;AARON HARPER&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11775/feed&quot; target=&quot;_blank&quot;&gt;Guide to Hash Tables in Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Hash tables offer an efficient and flexible method of storing and retrieving data, making them indispensable for tasks involving large data sets or requiring rapid access to stored items. Python&amp;rsquo;s &lt;code&gt;dict&lt;/code&gt; is a hash, learn how it works and how it can help your code.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11775/feed&quot; target=&quot;_blank&quot;&gt;DIMITRIJE STAMENIC&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11764/feed&quot; target=&quot;_blank&quot;&gt;Confusing &lt;code&gt;git&lt;/code&gt; Terminology&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Julia is working on a doc that explains git and in doing so polled some people about what git terminology they found confusing. This post covers the most common responses and attempts to clear up the confusion.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11764/feed&quot; target=&quot;_blank&quot;&gt;JULIA EVANS&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11768/feed&quot; target=&quot;_blank&quot;&gt;Check if a Python String Contains a Substring&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; In this video course, you&amp;rsquo;ll learn the best way to check whether a Python string contains a substring. You&amp;rsquo;ll also learn about idiomatic ways to inspect the substring further, match substrings with conditions using regular expressions, and search for substrings in pandas.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11768/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;span&gt;course&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11785/feed&quot; target=&quot;_blank&quot;&gt;Building a Python Compiler and Interpreter&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; This article starts the journey of building a compiler and interpreter for the Python programming language, in Python. You&amp;rsquo;ll learn all about tokenizing, parsing, compiling, and interpreting.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11785/feed&quot; target=&quot;_blank&quot;&gt;RODRIGO GIRÃO SERRÃO&lt;/a&gt; • Shared by &lt;a href=&quot;https://pycoders.com/link/11762/feed&quot; target=&quot;_blank&quot;&gt;Rodrigo Girão Serrão&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11782/feed&quot; target=&quot;_blank&quot;&gt;TIL: Django Constraints&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Constraints in Django allow you to further restrict how data is managed in the database. This quick post covers how to use the &lt;code&gt;CheckConstraint&lt;/code&gt; and &lt;code&gt;UniqueConstraint&lt;/code&gt; classes in Django.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11782/feed&quot; target=&quot;_blank&quot;&gt;SARAH ABDEREMANE&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11760/feed&quot; target=&quot;_blank&quot;&gt;PEP 733: An Evaluation of Python&amp;rsquo;s Public C API&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; This is an informational PEP describing the shared public view of the C API in Python. It talks about why the C API exists, who the stakeholders are, and problems with the interface.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11760/feed&quot; target=&quot;_blank&quot;&gt;PYTHON.ORG&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11758/feed&quot; target=&quot;_blank&quot;&gt;What Stage Startup Offers the Best Risk-Reward Tradeoff?&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; A deep dive on the success rate statistics of startups in the US with analysis on what joining at different stages means to a stock package payout.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11758/feed&quot; target=&quot;_blank&quot;&gt;BILLY GALLAGHER&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11776/feed&quot; target=&quot;_blank&quot;&gt;Let&amp;rsquo;s Make a Silly JSON-like Parser&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; This article goes into deep detail on how you would construct a JSON parser in Python. If you&amp;rsquo;re new to parsing, this is a great place to start.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11776/feed&quot; target=&quot;_blank&quot;&gt;ARUN MANI J&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11763/feed&quot; target=&quot;_blank&quot;&gt;Rust vs. Go, Java, and Python in AWS Lambda Functions&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; A performance comparison of JSON parsing in AWS Lambda functions using Rust, Go, Java, and Python.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11763/feed&quot; target=&quot;_blank&quot;&gt;CLIFF CROSLAND&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11771/feed&quot; target=&quot;_blank&quot;&gt;Everything You Can Do With Python&amp;rsquo;s &lt;code&gt;bisect&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Learn how to optimize search and keep your data sorted in Python with the &lt;code&gt;bisect&lt;/code&gt; module&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11771/feed&quot; target=&quot;_blank&quot;&gt;MARTIN HEINZ&lt;/a&gt; • Shared by &lt;a href=&quot;https://pycoders.com/link/11772/feed&quot; target=&quot;_blank&quot;&gt;Martin Heinz&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Projects &amp;amp; Code&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11780/feed&quot; target=&quot;_blank&quot;&gt;uapi: Microframework for HTTP APIs&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11780/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/TINCHE&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11755/feed&quot; target=&quot;_blank&quot;&gt;queryish: Data Queries Following Django&amp;rsquo;s QuerySet API&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11755/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/WAGTAIL&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11784/feed&quot; target=&quot;_blank&quot;&gt;grablinks: Extract Links From a Remote HTML Resource&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11784/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/THE-REAL-TOKAI&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11777/feed&quot; target=&quot;_blank&quot;&gt;Bottle: Lightweight WSGI Micro Web Framework&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11777/feed&quot; target=&quot;_blank&quot;&gt;BOTTLEPY.ORG&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11783/feed&quot; target=&quot;_blank&quot;&gt;FunASR: Speech Recognition Toolkit&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11783/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/ALIBABA-DAMO-ACADEMY&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Events&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11769/feed&quot; target=&quot;_blank&quot;&gt;Weekly Real Python Office Hours Q&amp;amp;A (Virtual)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 15, 2023&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11769/feed&quot; target=&quot;_blank&quot;&gt;REALPYTHON.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11759/feed&quot; target=&quot;_blank&quot;&gt;PyData Bristol Meetup&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 16, 2023&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11759/feed&quot; target=&quot;_blank&quot;&gt;MEETUP.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11766/feed&quot; target=&quot;_blank&quot;&gt;PyData Karlsruhe #8&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 16, 2023&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11766/feed&quot; target=&quot;_blank&quot;&gt;MEETUP.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11756/feed&quot; target=&quot;_blank&quot;&gt;PyLadies Dublin&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 16, 2023&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11756/feed&quot; target=&quot;_blank&quot;&gt;PYLADIES.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11770/feed&quot; target=&quot;_blank&quot;&gt;Hamburg Python Pizza&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 17 to November 18, 2023&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11770/feed&quot; target=&quot;_blank&quot;&gt;PYTHON.PIZZA&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11767/feed&quot; target=&quot;_blank&quot;&gt;PyCon ID 2023&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 18 to November 20, 2023&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11767/feed&quot; target=&quot;_blank&quot;&gt;PYCON.ID&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/11778/feed&quot; target=&quot;_blank&quot;&gt;PyCon Chile 2023&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 24 to November 27, 2023&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/11778/feed&quot; target=&quot;_blank&quot;&gt;PYCON.CL&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;hr /&gt; &lt;p&gt;Happy Pythoning!&lt;br /&gt;This was PyCoder&amp;rsquo;s Weekly Issue #603.&lt;br /&gt;&lt;a href=&quot;https://pycoders.com/issues/603/feed&quot;&gt;View in Browser »&lt;/a&gt;&lt;/p&gt; &lt;img src=&quot;https://pycoders.com/issues/603/open/feed&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;alt&quot; /&gt; 
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Subscribe to 🐍 PyCoder&amp;rsquo;s Weekly 💌 – Get the best Python news, articles, and tutorials delivered to your inbox once a week &lt;a href=&quot;https://pycoders.com/?utm_source=pycoders&amp;utm_medium=feed&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 14 Nov 2023 19:30:00 +0000</pubDate>
</item>
<item>
	<title>Real Python: Python Basics: Modules and Packages</title>
	<guid>https://realpython.com/courses/python-basics-modules-packages/</guid>
	<link>https://realpython.com/courses/python-basics-modules-packages/</link>
	<description>&lt;p&gt;As you gain experience writing code, you&amp;rsquo;ll eventually work on
projects that are so large that keeping all the code in a single file
becomes cumbersome.&lt;/p&gt;
&lt;p&gt;Instead of writing a single file, you can put related code into separate
files called &lt;strong&gt;modules&lt;/strong&gt;. You can put individual modules together like
building blocks to create a larger application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this video course, you&amp;rsquo;ll learn how to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; your own modules&lt;/li&gt;
&lt;li&gt;Use modules in another file through the &lt;strong&gt;&lt;code&gt;import&lt;/code&gt; statement&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Organize several modules into a &lt;strong&gt;package&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This video course is part of the Python Basics series, which accompanies &lt;a href=&quot;https://realpython.com/products/python-basics-book/&quot;&gt;&lt;em&gt;Python Basics: A Practical Introduction to Python 3&lt;/em&gt;&lt;/a&gt;. You can also check out the other &lt;a href=&quot;https://realpython.com/learning-paths/python-basics/&quot;&gt;Python Basics courses&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Note that you&amp;rsquo;ll be using &lt;a href=&quot;https://realpython.com/python-idle/&quot;&gt;IDLE&lt;/a&gt; to &lt;a href=&quot;https://realpython.com/interacting-with-python/&quot;&gt;interact with Python&lt;/a&gt; throughout this course.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 14 Nov 2023 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Python Morsels: Solving programming exercises</title>
	<guid>https://www.pythonmorsels.com/programming-exercise-tips/</guid>
	<link>https://www.pythonmorsels.com/programming-exercise-tips/</link>
	<description>&lt;p&gt;How can you maximize the learning value from each coding challenge you solve?&lt;/p&gt;


&lt;div&gt;
  
  &lt;p&gt;
  &lt;strong&gt;Table of contents&lt;/strong&gt;
  &lt;ol&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/programming-exercise-tips/#outline-an-approach-and-walk-away&quot; target=&quot;_blank&quot;&gt;Outline an approach and walk away &amp;#128173;&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/programming-exercise-tips/#time-box-yourself&quot; target=&quot;_blank&quot;&gt;Time-box yourself &amp;#9202;&amp;#65039;&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/programming-exercise-tips/#remove-your-distractions&quot; target=&quot;_blank&quot;&gt;Remove your distractions &amp;#128277;&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/programming-exercise-tips/#write-now-refactor-later&quot; target=&quot;_blank&quot;&gt;Write now, refactor later &amp;#128221;&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/programming-exercise-tips/#stuck-stop&quot; target=&quot;_blank&quot;&gt;Stuck? Stop! &amp;#128721;&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/programming-exercise-tips/#flounder-first-then-seek-help&quot; target=&quot;_blank&quot;&gt;Flounder first, then seek help &amp;#128373;&amp;#65039;&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/programming-exercise-tips/#do-it-all-over-again&quot; target=&quot;_blank&quot;&gt;Do it all over again &amp;#128257;&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/programming-exercise-tips/#focus-on-the-process-not-the-product&quot; target=&quot;_blank&quot;&gt;Focus on the process, not the product &amp;#9968;&amp;#65039;&lt;/a&gt;&lt;/li&gt;
  
  &lt;/ol&gt;
  &lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  
    &lt;h2&gt;Outline an approach and walk away &amp;#128173;&lt;/h2&gt;
    
      
        &lt;p&gt;Start by &lt;strong&gt;outlining your approach&lt;/strong&gt; in &lt;strong&gt;a &lt;a href=&quot;https://www.pythonmorsels.com/docstrings/&quot; target=&quot;_blank&quot;&gt;docstring&lt;/a&gt; or a comment&lt;/strong&gt;.
Be detailed, but use rough descriptions and &lt;strong&gt;pseudocode&lt;/strong&gt;.
You'll likely find yourself rereading the problem statement multiple times as you outline your approach.&lt;/p&gt;

      
        &lt;p&gt;For a challenging problem where you're likely to get stuck, &lt;strong&gt;time-box your outlining time&lt;/strong&gt;.
For example, set a timer for 15 minutes and then start outlining.
When the timer goes off, &lt;strong&gt;walk away&lt;/strong&gt;.&lt;/p&gt;

      
        &lt;p&gt;Walking away will let your brain &lt;strong&gt;work on the problem in the background&lt;/strong&gt;.
This will decrease the stress of getting stuck on a problem &lt;em&gt;and&lt;/em&gt; &lt;strong&gt;allow your brain to be more creative&lt;/strong&gt; because you're now unencumbered by the need to solve the problem quickly.&lt;/p&gt;

      
        &lt;p&gt;Ideally, after outlining the problem you might take a shower, make yourself a meal, or go for a walk.
If you can, try to perform an activity that doesn't require intent focus, &lt;strong&gt;so your brain can wander&lt;/strong&gt;.&lt;/p&gt;

      
        &lt;p&gt;When you walk away from an exercise before it's complete, you're likely to keep pondering it.
You might realize your approach has a flaw &lt;em&gt;or&lt;/em&gt; you might think of a completely different approach.
The next time you sit down to solve your programming exercise, you'll likely find that you're &lt;strong&gt;a bit more eager to jump in&lt;/strong&gt; than you would have if you'd kept coding right after outlining.&lt;/p&gt;

      
    
  
    &lt;h2&gt;Time-box yourself &amp;#9202;&amp;#65039;&lt;/h2&gt;
    
      &lt;p&gt;Ready to sit down and …&lt;/p&gt;
    
  
&lt;/div&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.pythonmorsels.com/programming-exercise-tips/&quot; target=&quot;_blank&quot;&gt;Read the full article: https://www.pythonmorsels.com/programming-exercise-tips/&lt;/a&gt;&lt;/h3&gt;</description>
	<pubDate>Tue, 14 Nov 2023 14:00:00 +0000</pubDate>
</item>
<item>
	<title>scikit-learn: NVIDIA Is A New Sponsor Of The Scikit-Learn consortium at the Inria Foundation</title>
	<guid>https://blog.scikit-learn.org/funding/nvidia-is-a-new-sponsor/</guid>
	<link>https://blog.scikit-learn.org/funding/nvidia-is-a-new-sponsor/</link>
	<description>&lt;div&gt;
  &lt;img src=&quot;https://blog.scikit-learn.org/assets/images/posts_images/NVIDIAxsklearn.jpg&quot; alt=&quot;&quot; /&gt;
  

  
  
  
  

  

  

Author:  
      &lt;a href=&quot;https://developer.nvidia.com/gpu-accelerated-libraries&quot; rel=&quot;me noopener noreferrer&quot;&gt;&lt;img src=&quot;https://blog.scikit-learn.org/assets/images/author_images/nvidia-logo.png&quot; alt=&quot;Author Icon&quot; class=&quot;orcid-icon&quot; /&gt;NVIDIA&lt;/a&gt;
     , 


  
  
  
  

  

  


      &lt;a href=&quot;https://github.com/francoisgoupil&quot; rel=&quot;me noopener noreferrer&quot;&gt;&lt;img src=&quot;https://blog.scikit-learn.org/assets/images/author_images/francois_goupil.jpeg&quot; alt=&quot;Author Icon&quot; class=&quot;orcid-icon&quot; /&gt;François Goupil&lt;/a&gt;
      
        &lt;a href=&quot;mailto:francois.goupil@inria.fr&quot; title=&quot;francois.goupil@inria.fr&quot;&gt;&lt;span&gt;&lt;i class=&quot;elastic-fai fas fa-envelope&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;
      

&lt;br /&gt;&lt;br /&gt;

&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;Sponsored blog post&lt;/em&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We are thrilled to announce that &lt;a href=&quot;https://www.nvidia.com&quot;&gt;NVIDIA&lt;/a&gt; has joined the &lt;a href=&quot;https://scikit-learn.fondation-inria.fr/&quot;&gt;scikit-learn consortium&lt;/a&gt; as a corporate partner. As a leading provider of GPU-accelerated computing solutions, we at NVIDIA recognize the importance of machine learning and the role it plays in the growth of many industries and areas of science. Our partnership with the scikit-learn consortium demonstrates our commitment to supporting the development and advancement of open-source software in the machine learning community.&lt;/p&gt;

&lt;div&gt;
   
   
  
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://scikit-learn.org/stable/&quot;&gt;Scikit-learn&lt;/a&gt; is a popular open-source Python library for machine learning. One of the strengths of scikit-learn is its ease of use and well-defined API. This makes it a favorite tool among data scientists and machine learning practitioners. Thanks to its active community and continuous development, scikit-learn is constantly evolving and improving.&lt;/p&gt;

&lt;p&gt;At NVIDIA, we believe that investing in open-source projects like scikit-learn is important. Afterall, it is a central component of the modern data stack in both science and industry. By financially supporting the scikit-learn consortium, we are contributing to the long-term sustainability of scikit-learn and helping to ensure that it remains an easy to use, reliable and valuable tool for years to come. Furthermore, we hope to help advance the project’s development, improve its performance, and enhance its capabilities for machine learning on GPUs.&lt;/p&gt;

&lt;p&gt;Our partnership with the scikit-learn consortium will also enable us to collaborate more closely with the scikit-learn community, and provide us with insights into how we can improve NVIDIA’s &lt;a href=&quot;https://developer.nvidia.com/rapids&quot;&gt;RAPIDS open-source libraries&lt;/a&gt; to better serve their needs. We are committed to working with the foundation to ensure that scikit-learn remains a powerful and easy to use machine learning library that meets the needs of data science practitioners in science and industry.&lt;/p&gt;

&lt;p&gt;NVIDIA’s commitment to scikit-learn goes beyond financial support. We have hired &lt;a href=&quot;https://betatim.github.io&quot;&gt;Tim Head&lt;/a&gt;, an experienced open-source maintainer, to work full-time on the project. This is not Tim’s first open-source rodeo. He has previously contributed to several high-profile open-source projects, including Project Jupyter. His focus will be reviewing pull requests and coordinating the development of large features. Tim was recently elected as a core maintainer of scikit-learn. His expertise and experience will be invaluable in ensuring the continued growth and success of the project.&lt;/p&gt;

&lt;p&gt;In summary, NVIDIA’s partnership with the scikit-learn consortium is an important step in our ongoing commitment to support the development and growth of open-source software in the machine learning community. We are excited to work with the foundation and the community of contributors to help advance the capabilities of scikit-learn and accelerate the development of machine learning applications.&lt;/p&gt;

&lt;p&gt;AI helped write this blog post!&lt;/p&gt;</description>
	<pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Seth Michael Larson: Querying every file in every release on the Python Package Index</title>
	<guid>http://sethmlarson.dev/security-developer-in-residence-weekly-report-18?date=2023-11-14</guid>
	<link>http://sethmlarson.dev/security-developer-in-residence-weekly-report-18?date=2023-11-14</link>
	<description>Querying every file in every release on the Python Package Index
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    



&lt;div class=&quot;header&quot;&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;row&quot;&gt;
      &lt;a href=&quot;http://sethmlarson.dev/&quot;&gt;About&lt;/a&gt; |
      &lt;a href=&quot;http://sethmlarson.dev/blog&quot;&gt;Blog&lt;/a&gt; |
      &lt;a href=&quot;https://tinyletter.com/sethmlarson&quot;&gt;Newsletter&lt;/a&gt; |
      &lt;a href=&quot;http://sethmlarson.dev/links&quot;&gt;Links&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
      
&lt;h1&gt;Querying every file in every release on the Python Package Index&lt;/h1&gt;
&lt;p&gt;Published 2023-11-14 by &lt;strong&gt;Seth Larson&lt;/strong&gt;&lt;br /&gt;
Reading time:  minutes&lt;/p&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;container&quot;&gt;

&lt;blockquote&gt;
  &lt;center&gt;This critical role would not be possible without funding from the &lt;a href=&quot;https://alpha-omega.dev&quot;&gt;OpenSSF Alpha-Omega Project&lt;/a&gt;. Massive thank-you to Alpha-Omega for investing in the security of the Python ecosystem!&lt;/center&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-6 col-12-sm&quot;&gt;
&lt;p&gt;Last week I &lt;a href=&quot;https://fosstodon.org/@sethmlarson/111382964885780823&quot;&gt;published a graphic&lt;/a&gt; showing the use of memory safe and unsafe systems programming
languages in Python packages which garnered some interest from the community how I was
creating such a graphic.

&lt;p&gt;The graphic used file extension information which
isn't a perfect method for detecting other programming languages, but likely good enough for trends and identifying projects.&lt;/p&gt;

&lt;p&gt;What is interesting about this graphic is it needs access to files within Python distributions like wheels and source distributions
on PyPI. This is something that's &lt;strong&gt;difficult to access without actually downloading the artifact&lt;/strong&gt;. So how
can I query this information for every package since 2005?&lt;/p&gt;

&lt;p&gt;I used the &lt;a href=&quot;http://sethmlarson.dev/security-developer-in-residence-weekly-report-16#finding-projects-with-vulnerable-libwebp&quot;&gt;same dataset previously&lt;/a&gt; to detect vulnerable WebP binaries bundled in Python packages.
Let's explore how to use this dataset to answer other questions!&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;col-6 col-12-sm&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;None of this article would be possible without the work of &lt;a href=&quot;https://tomforb.es&quot;&gt;Tom Forbes&lt;/a&gt; to create
and continually update this dataset. Thanks Tom for all your work and for helping
me get started.&lt;/p&gt;

&lt;h2&gt;Why is this data useful?&lt;/h2&gt;

&lt;p&gt;I'm also doing work on a few different projects regarding Python packaging metadata, namely
&lt;a href=&quot;https://peps.python.org/pep-0639/&quot;&gt;PEP 639&lt;/a&gt; and &quot;Tracking bundled projects in Python distributions&quot;. Having this dataset available
gives me a bunch of contextual information for those projects as well as being able to
track adoption of new packaging metadata.&lt;/p&gt;

&lt;p&gt;There was also a bit of emphasis about memory-safe programming languages in the recent &lt;a href=&quot;https://www.regulations.gov/document/ONCD-2023-0002-0001&quot;&gt;US Government
RFI&lt;/a&gt;, and I was the author for the section regarding memory safety. I wanted to explore the Python package ecosystems' current usage of memory safe languages
like Rust and Go compared to C, C++, and Fortran. From the above graphic it seems there's
some interest in using memory-safe languages which is nice to see.&lt;/p&gt;

&lt;p&gt;The need to be able to query this dataset for multiple projects meant it probably made
a bit of sense to create a small utility that can be reused, including by others (yay open source!) I
&lt;a href=&quot;https://gist.github.com/sethmlarson/852341a9b7899eda7d22d8c362c0a095&quot;&gt;created a small Gist&lt;/a&gt; that includes this utility. It's not optimized (actually quite slow if you
don't use threads when downloading of files).&lt;/p&gt;

&lt;h2&gt;Downloading the file metadata dataset&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;⚠️ &lt;strong&gt;WARNING: PLEASE READ!&lt;/strong&gt; ⚠️&lt;/p&gt;
  
  &lt;p&gt;A word of warning before we start blindly downloading all the things, &lt;strong&gt;these datasets are all very large&lt;/strong&gt;, like
  30+ GB just for the high-level metadata in Parquet files. Make sure you have enough storage space before 
  copying and pasting any commands you see in this blog post. I don't want to hear that anyone's filled up
  their hard-drive without knowing. &lt;strong&gt;You have been warned!&lt;/strong&gt; 🐉&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that out of the way, let's get started ourselves! The entire dataset is available under the &lt;a href=&quot;https://github.com/pypi-data&quot;&gt;pypi-data GitHub organization&lt;/a&gt;
with varying levels of detail all the way from high-level metadata and filenames to actual file contents.&lt;/p&gt;

&lt;p&gt;There are many datasets available on &lt;a href=&quot;https://py-code.org/datasets&quot;&gt;py-code.org/datasets&lt;/a&gt;. The Clickhouse dataset isn't completely up-to-date
but as a way to experiment with the dataset it can be an easy place to play around and get started. We want the complete
up-to-date dataset though, so we need to download things locally. We want the &quot;&lt;a href=&quot;https://py-code.org/datasets#metadata&quot;&gt;Metadata on every file uploaded to PyPI&lt;/a&gt;&quot;
dataset.&lt;/p&gt;

&lt;p&gt;To download the dataset there's a series of &lt;code&gt;curl&lt;/code&gt; commands:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ curl -L --remote-name-all &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl -L &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/pypi-data/data/raw/main/links/dataset.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Two curls in one (at least there's no &lt;code&gt;... | sudo sh&lt;/code&gt; involved...) let's examine the innermost curl first
and use a local copy instead of fetching from the network:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ curl -L &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/pypi-data/data/raw/main/links/dataset.txt&amp;quot;&lt;/span&gt; &amp;gt; dataset.txt
$ cat dataset.txt

https://github.com/pypi-data/data/releases/download/2023-11-12-03-06/index-0.parquet
https://github.com/pypi-data/data/releases/download/2023-11-12-03-06/index-1.parquet
https://github.com/pypi-data/data/releases/download/2023-11-12-03-06/index-10.parquet
https://github.com/pypi-data/data/releases/download/2023-11-12-03-06/index-11.parquet
https://github.com/pypi-data/data/releases/download/2023-11-12-03-06/index-12.parquet
https://github.com/pypi-data/data/releases/download/2023-11-12-03-06/index-13.parquet
https://github.com/pypi-data/data/releases/download/2023-11-12-03-06/index-14.parquet
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It's a list of URLs that all look legit, let's download those (this will take some time):&lt;/p&gt;

&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ curl -L --remote-name-all &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat dataset.txt&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
$ ls
index-0.parquet   index-12.parquet  index-1.parquet  index-4.parquet  index-7.parquet
index-10.parquet  index-13.parquet  index-2.parquet  index-5.parquet  index-8.parquet
index-11.parquet  index-14.parquet  index-3.parquet  index-6.parquet  index-9.parquet
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2&gt;Querying the dataset&lt;/h2&gt;

&lt;p&gt;In order to take full advantage of this dataset we can query the top-level Parquet metadata and subsequently download the underlying individual files only when
necessary. I've created a &lt;a href=&quot;https://gist.github.com/sethmlarson/852341a9b7899eda7d22d8c362c0a095&quot;&gt;small helper as I mentioned earlier&lt;/a&gt; (&lt;code&gt;pycodeorg&lt;/code&gt; module below) to assist with these examples.&lt;/p&gt;

&lt;p&gt;The dataset uses Parquet as a data storage format which is columnar and can be &lt;a href=&quot;https://duckdb.org/&quot;&gt;queried using DuckDB&lt;/a&gt;. This is the first project I've used DuckDB with and
from first impressions it seems like a lovely piece of software. Before we start creating our query I like to see what the dataset fields and types are so lets run a &lt;code&gt;DESCRIBE&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;DESCRIBE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'*.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;┌─────────────────┬─────────────┬─────────┐&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_type&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├─────────────────┼─────────────┼─────────┤&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project_name&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project_version&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project_release&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uploaded_on&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TIMESTAMP&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;            &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;archive_path&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt;            &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UBIGINT&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;            &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BLOB&lt;/span&gt;        &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skip_reason&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UBIGINT&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;      &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINTEGER&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├─────────────────┴─────────────┴─────────┤&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt;                       &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└─────────────────────────────────────────┘&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we know the form of the dataset we can make our first query. Let's create a query for projects per file extension and split that by month.
That query would look something like this:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- We're bucketing our data by month and extension --&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;datetrunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uploaded_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;regexp_extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\.([a-z0-9]+)$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;-- DuckDB has native list/object manipulation, pretty cool! --&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'*.parquet'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- Our regex for matching files for languages we care about --&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;regexp_matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\.(asm|c|cc|cpp|cxx|h|hpp|rs|[Ff][0-9]{0-2}(?:or)?|go)$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;-- Filter out test files and whole virtual environments --&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- embedded in Python distributions. --&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp_matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'(^|/)test(|s|ing)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/site-packages/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With this query and some data massaging we can create this graphic and see how Rust is driving the majority
of memory-safe programming language use in binary Python distributions:&lt;/p&gt;

&lt;div&gt;
&lt;center&gt;
&lt;img src=&quot;https://cdn.fosstodon.org/media_attachments/files/111/410/225/101/983/840/original/71a542db21ab6e7d.png&quot; alt=&quot;Graph of different languages in Python packages over time. Initially was almost all C/C++, now Rust is gaining.&quot; title=&quot;Graph of different languages in Python packages over time. Initially was almost all C/C++, now Rust is gaining.&quot; /&gt;
&lt;/center&gt;
&lt;/div&gt;

&lt;h2&gt;Accessing file data&lt;/h2&gt;

&lt;p&gt;Previously it was very difficult to learn about the adoption of new packaging metadata standards
and fields due to the prohibitively large bandwidth, storage, and CPU cost that came with downloading an entire
swath of PyPI and unpack their contents only to examine a small &lt;code&gt;METADATA&lt;/code&gt; or &lt;code&gt;WHEEL&lt;/code&gt; file. However, with this dataset
we can write a simple query and fetch only the files we need to get the answers to the above questions:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'*.parquet'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- We only want distributions uploaded in --&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- October 2023 for a recent snapshot. --&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;datetrunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uploaded_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;DATE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2023-10-01'&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;-- We want .dist-info/WHEEL files from wheels --&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp_matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\.dist-info/WHEEL$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;-- And files shouldn't be skipped since we can't call --&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- `get_file()` on these, like if they're empty or binaries. --&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- Pretty unlikely! --&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skip_reason&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;substitute this query in for the &lt;code&gt;QUERY&lt;/code&gt; variable below:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pycodeorg&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;QUERY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Find all 'WHEEL' metadata files in wheels:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pycodeorg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QUERY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Fetch the file data from the dataset&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pycodeorg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Then parse the 'Generator' field and aggregate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\nGenerator:\s*([\w]+)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This query allows me to provide this data, which to my knowledge isn't available yet
and from this we can answer questions like which wheel builder is most common (which are &lt;code&gt;bdist_wheel&lt;/code&gt; by a wide margin, then &lt;code&gt;poetry&lt;/code&gt; and &lt;code&gt;hatch&lt;/code&gt;)
and which packaging metadata fields are in use. I'm excited to see what other insights folks are able to gather
from using this dataset!&lt;/p&gt;

&lt;h2&gt;Other items&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https://www.regulations.gov/document/ONCD-2023-0002-0001&quot;&gt;Request for Information (RFI) response&lt;/a&gt; for the Python Software Foundation has been submitted. Hope that our submission will be available on regulations.gov soon.
We'll write a blog post on the PSF blog sharing the response once its available.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.pypi.org/posts/2023-11-14-1-pypi-completes-first-security-audit/&quot;&gt;PyPI's security audit blog post&lt;/a&gt; and &lt;a href=&quot;https://blog.trailofbits.com/2023/11/14/our-audit-of-pypi/&quot;&gt;corresponding post by Trail of Bits&lt;/a&gt; have been published. I didn't work directly on this project but it's so exciting to see the results of this work
be shared.&lt;/li&gt;
&lt;li&gt;Pushed the blog post announcing the &quot;Becoming a CVE Numbering Authority as an Open Source project&quot;
into final draft, now working with OpenSSF marketing to schedule the post for the blog.&lt;/li&gt;
&lt;li&gt;Received a &lt;a href=&quot;https://twitter.com/tiangolo/status/1723335223750861152&quot;&gt;shoutout from Carol Willing&lt;/a&gt; during her keynote at PyCon Sweden. Thanks, Carol!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all for this week! 👋 If you're interested in more you can read &lt;a href=&quot;http://sethmlarson.dev/security-developer-in-residence-weekly-report-17&quot;&gt;last week's report&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;Don't let social media algorithms decide what you want to see.&lt;/strong&gt;&lt;/p&gt;
    &lt;p&gt;
        &lt;strong&gt;Never miss an article and support the decentralized web.&lt;/strong&gt; Get guaranteed notifications for new publications by following the &lt;a href=&quot;http://sethmlarson.dev/feed&quot;&gt;RSS feed&lt;/a&gt; or the &lt;a href=&quot;https://tinyletter.com/sethmlarson&quot;&gt;email newsletter&lt;/a&gt;.
        Send any thoughts and questions you have via &lt;a href=&quot;https://fosstodon.org/@sethmlarson&quot;&gt;Mastodon&lt;/a&gt; or &lt;a href=&quot;mailto:sethmichaellarson@gmail.com&quot;&gt;email&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;strong&gt;Thanks for reading!&lt;/strong&gt;&lt;br /&gt; — Seth
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div&gt;
    &lt;center&gt;
         &lt;p&gt;This work is licensed under &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1&quot; target=&quot;_blank&quot; rel=&quot;license noopener noreferrer&quot;&gt;CC BY-SA 4.0&lt;/a&gt; &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1&quot; target=&quot;_blank&quot; rel=&quot;license noopener noreferrer&quot;&gt;&lt;img src=&quot;https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1&quot; /&gt;&lt;img src=&quot;https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1&quot; /&gt;&lt;img src=&quot;https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/center&gt;
&lt;/div&gt;

&lt;/div&gt;</description>
	<pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Real Python: JupyterLab for an Enhanced Notebook Experience</title>
	<guid>https://realpython.com/using-jupyterlab/</guid>
	<link>https://realpython.com/using-jupyterlab/</link>
	<description>&lt;div&gt;&lt;p&gt;Maybe you’ve already worked with Jupyter Notebooks from &lt;a href=&quot;https://docs.jupyter.org/en/latest/&quot;&gt;Project Jupyter&lt;/a&gt; to create documents containing runnable code. You can achieve even more with &lt;strong&gt;JupyterLab&lt;/strong&gt;, a tool kit that you can use to document and share your research, teaching, and learning activities. It’s useful in a wide range of disciplines, from data analysis and data visualization to scientific study.&lt;/p&gt;
&lt;p&gt;JupyterLab enhances your notebooks by providing a &lt;strong&gt;browser-based interface&lt;/strong&gt; that allows you to use &lt;strong&gt;multiple notebooks&lt;/strong&gt; together effectively. In addition, it offers you a comprehensive Markdown editor, file manager, file viewer, and an infrastructure that enables you to run code from a wide range of files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this tutorial, you’ll learn how to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Share code&lt;/strong&gt; between multiple Jupyter Notebooks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt; a Jupyter Notebook&lt;/li&gt;
&lt;li&gt;Create and manage &lt;strong&gt;Markdown&lt;/strong&gt; files&lt;/li&gt;
&lt;li&gt;Run &lt;strong&gt;embedded code&lt;/strong&gt; from a range of different files&lt;/li&gt;
&lt;li&gt;Manage and view &lt;strong&gt;different file types&lt;/strong&gt; from a single interface&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access&lt;/strong&gt; your operating system from within JupyterLab&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Jupyter&lt;/em&gt; is a &lt;a href=&quot;https://www.britannica.com/topic/portmanteau-word&quot;&gt;portmanteau&lt;/a&gt; word blended from the three programming languages &lt;strong&gt;Ju&lt;/strong&gt;lia, &lt;strong&gt;Py&lt;/strong&gt;thon, and &lt;strong&gt;R&lt;/strong&gt;. Although you’ll focus on Python in this tutorial, you can use Jupyter with the other languages as well. Plus, this free application works on macOS, Linux, and Windows environments.&lt;/p&gt;
&lt;p&gt;JupyterLab takes &lt;a href=&quot;https://realpython.com/jupyter-notebook-introduction/&quot;&gt;Jupyter Notebook&lt;/a&gt; usage to a different level, so you’ll get the most out of this tutorial if you’re already familiar with Jupyter Notebook.&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;
&lt;p&gt;&lt;strong&gt;Free Bonus:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/bonus/using-jupyterlab-materials/&quot; class=&quot;alert-link&quot;&gt;Click here to download notebooks and files&lt;/a&gt; that you can play with in JupyterLab.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;installing-and-starting-jupyterlab&quot;&gt;Installing and Starting JupyterLab&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#installing-and-starting-jupyterlab&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The cleanest way of installing JupyterLab on a computer is to use a &lt;a href=&quot;https://realpython.com/python-virtual-environments-a-primer/&quot;&gt;virtual environment&lt;/a&gt;. This will ensure that your JupyterLab work doesn’t interfere with any other Python projects or environments that you may already have. For this tutorial, you’ll create a new virtual environment named &lt;code&gt;jl_venv&lt;/code&gt;. Select your operating system to get JupyterLab up and running: &lt;/p&gt;
&lt;ul class=&quot;nav nav-tabs justify-content-end js-platform-widget-tabs&quot;&gt;

  &lt;li class=&quot;nav-item mb-0 js-platform-widget-tab-windows&quot;&gt;
    &lt;a class=&quot;nav-link link-unstyled text-body active small&quot; id=&quot;windows-tab-1&quot; href=&quot;https://realpython.com/atom.xml#windows-1&quot;&gt;&lt;span class=&quot;icon baseline text-muted mr-1&quot;&gt;&lt;/span&gt;Windows&lt;/a&gt;
  &lt;/li&gt;


  &lt;li class=&quot;nav-item mb-0 js-platform-widget-tab-linux&quot;&gt;
    &lt;a class=&quot;nav-link link-unstyled text-body small &quot; id=&quot;linux-tab-1&quot; href=&quot;https://realpython.com/atom.xml#linux-1&quot;&gt;&lt;span class=&quot;icon baseline text-muted mr-1&quot;&gt;&lt;/span&gt;Linux&lt;/a&gt;
  &lt;/li&gt;


  &lt;li class=&quot;nav-item mb-0 js-platform-widget-tab-macos&quot;&gt;
    &lt;a class=&quot;nav-link link-unstyled text-body small&quot; id=&quot;macos-tab-1&quot; href=&quot;https://realpython.com/atom.xml#macos-1&quot;&gt;&lt;span class=&quot;icon baseline text-muted mr-1&quot;&gt;&lt;/span&gt;macOS&lt;/a&gt;
  &lt;/li&gt;


&lt;/ul&gt;
&lt;div class=&quot;tab-content mt-2 mb-0 js-platform-widget-content&quot;&gt;
&lt;div class=&quot;tab-pane fade show active&quot; id=&quot;windows-1&quot;&gt;
&lt;p&gt;If you haven’t already done so, download and &lt;a href=&quot;https://realpython.com/installing-python/&quot;&gt;install Python&lt;/a&gt; on your Windows computer. Then fire up a &lt;code&gt;Windows PowerShell(Admin)&lt;/code&gt; or &lt;code&gt;Terminal(Admin)&lt;/code&gt; prompt depending on the version of Windows that you’re using. Now type in the following commands:   &lt;/p&gt;
&lt;div class=&quot;codeblock mb-3 w-100&quot;&gt;
  &lt;div class=&quot;codeblock__header d-flex justify-content-between codeblock--yellow&quot;&gt;
    &lt;span class=&quot;mr-2 noselect&quot;&gt;Windows PowerShell&lt;/span&gt;
    
    &lt;div class=&quot;noselect&quot;&gt;
      
        &lt;span class=&quot;codeblock__output-toggle&quot; title=&quot;Toggle prompts and output&quot;&gt;&lt;span class=&quot;icon baseline js-codeblock-output-on codeblock__header--icon-lower&quot;&gt;&lt;/span&gt;&lt;/span&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;div class=&quot;highlight pscon highlight--with-header&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;PS&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jupyterlab_projects&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;PS&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jupyterlab_projects&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;PS&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;venv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jl_venv&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;PS&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jl_venv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activate&lt;/span&gt;
&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;PS&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jupyterlab&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    &lt;button class=&quot;codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only&quot; title=&quot;Copy to clipboard&quot;&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt;&lt;/button&gt;
    
      &lt;span class=&quot;small&quot;&gt;&lt;span class=&quot;icon baseline mr-1 text-success&quot;&gt;&lt;/span&gt;Copied!&lt;/span&gt;
    
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To keep things neat, you first create a new &lt;code&gt;jupyterlab_projects&lt;/code&gt; folder for all of your JupyterLab work. Later you’ll create individual subfolders for each of your projects to keep everything organized.&lt;/p&gt;
&lt;p&gt;Next, you create a virtual environment named &lt;code&gt;jl_venv&lt;/code&gt; within this folder, which you then activate. If the activation is successful, then the virtual environment’s name will precede your Powershell prompt. If not, see the alert box below. Finally, you install JupyterLab into this virtual environment.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When you run the activation script, you may receive an error stating that your system can’t run the script. Modern versions of Windows don’t allow you to run scripts downloaded from the Internet. This is a security feature.&lt;/p&gt;
&lt;p&gt;To fix this, you need to type the command &lt;code&gt;Set-ExecutionPolicy RemoteSigned&lt;/code&gt;, then answer &lt;code&gt;Y&lt;/code&gt; to the question. Your computer will now run scripts that Microsoft has verified. Once you’ve done this, retry the &lt;code&gt;jl_venv\Scripts\activate&lt;/code&gt; command, which should now work.  &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As you can see above, you have a PowerShell prompt that’s preceded by &lt;code&gt;(jl_venv)&lt;/code&gt;. This means anything you do from this point forward will stay in this environment and remain separate from any other Python work that you may have elsewhere. &lt;/p&gt;
&lt;p&gt;Finally, for neatness, you’ll create a new folder named &lt;code&gt;tutorial_project&lt;/code&gt;. This will serve as a working area for this tutorial. Then you start up JupyterLab from within it:&lt;/p&gt;
&lt;div class=&quot;codeblock mb-3 w-100&quot;&gt;
  &lt;div class=&quot;codeblock__header d-flex justify-content-between codeblock--yellow&quot;&gt;
    &lt;span class=&quot;mr-2 noselect&quot;&gt;Windows PowerShell&lt;/span&gt;
    
    &lt;div class=&quot;noselect&quot;&gt;
      
        &lt;span class=&quot;codeblock__output-toggle&quot; title=&quot;Toggle prompts and output&quot;&gt;&lt;span class=&quot;icon baseline js-codeblock-output-on codeblock__header--icon-lower&quot;&gt;&lt;/span&gt;&lt;/span&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;div class=&quot;highlight pscon highlight--with-header&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;PS&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tutorial_project&lt;/span&gt;
&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;PS&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tutorial_project&lt;/span&gt;
&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;PS&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jupyter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    &lt;button class=&quot;codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only&quot; title=&quot;Copy to clipboard&quot;&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt;&lt;/button&gt;
    
      &lt;span class=&quot;small&quot;&gt;&lt;span class=&quot;icon baseline mr-1 text-success&quot;&gt;&lt;/span&gt;Copied!&lt;/span&gt;
    
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;tab-pane fade &quot; id=&quot;linux-1&quot;&gt;
&lt;p&gt;To install JupyterLab, fire up a terminal and run the following commands:&lt;/p&gt;
&lt;div class=&quot;codeblock mb-3 w-100&quot;&gt;
  &lt;div class=&quot;codeblock__header d-flex justify-content-between codeblock--yellow&quot;&gt;
    &lt;span class=&quot;mr-2 noselect&quot;&gt;Shell&lt;/span&gt;
    
    &lt;div class=&quot;noselect&quot;&gt;
      
        &lt;span class=&quot;codeblock__output-toggle&quot; title=&quot;Toggle prompts and output&quot;&gt;&lt;span class=&quot;icon baseline js-codeblock-output-on codeblock__header--icon-lower&quot;&gt;&lt;/span&gt;&lt;/span&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;div class=&quot;highlight sh highlight--with-header&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jupyterlab_projects
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jupyterlab_projects
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python3&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-m&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;venv&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jl_venv
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jl_venv/bin/activate
&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-m&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;pip&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;install&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jupyterlab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    &lt;button class=&quot;codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only&quot; title=&quot;Copy to clipboard&quot;&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt;&lt;/button&gt;
    
      &lt;span class=&quot;small&quot;&gt;&lt;span class=&quot;icon baseline mr-1 text-success&quot;&gt;&lt;/span&gt;Copied!&lt;/span&gt;
    
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To keep things neat, you first create a new &lt;code&gt;jupyterlab_projects&lt;/code&gt; directory for all of your JupyterLab work. Later you can create individual subdirectories for each of your projects to keep things organized.&lt;/p&gt;
&lt;p&gt;Next, you create a virtual environment named &lt;code&gt;jl_venv&lt;/code&gt;. If this command fails, see the alert box below. You then activate your virtual environment by running its activation script. Once the virtual environment is activated, its name precedes your terminal prompt. You install JupyterLab into this virtual environment.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To create a virtual environment on Linux, you need to have the &lt;code&gt;python3-venv&lt;/code&gt; package installed on your computer. If you don’t have this, then run the command &lt;code&gt;sudo apt-get install python3-venv&lt;/code&gt; before running the &lt;code&gt;python3 -m venv jl_venv&lt;/code&gt; command once more. &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Your terminal prompt now shows that &lt;code&gt;(jl_venv)&lt;/code&gt; is the active environment. This means anything you do from this point forward will happen in this environment and remain separate from any other Python work that you may have elsewhere. &lt;/p&gt;
&lt;p&gt;Finally, for neatness, you’ll create a new directory named &lt;code&gt;tutorial_project&lt;/code&gt; and then start up JupyterLab from within it:&lt;/p&gt;
&lt;div class=&quot;codeblock mb-3 w-100&quot;&gt;
  &lt;div class=&quot;codeblock__header d-flex justify-content-between codeblock--yellow&quot;&gt;
    &lt;span class=&quot;mr-2 noselect&quot;&gt;Shell&lt;/span&gt;
    
    &lt;div class=&quot;noselect&quot;&gt;
      
        &lt;span class=&quot;codeblock__output-toggle&quot; title=&quot;Toggle prompts and output&quot;&gt;&lt;span class=&quot;icon baseline js-codeblock-output-on codeblock__header--icon-lower&quot;&gt;&lt;/span&gt;&lt;/span&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;div class=&quot;highlight sh highlight--with-header&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;tutorial_project
&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;tutorial_project
&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jupyter&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;lab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    &lt;button class=&quot;codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only&quot; title=&quot;Copy to clipboard&quot;&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt;&lt;/button&gt;
    
      &lt;span class=&quot;small&quot;&gt;&lt;span class=&quot;icon baseline mr-1 text-success&quot;&gt;&lt;/span&gt;Copied!&lt;/span&gt;
    
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;tab-pane fade &quot; id=&quot;macos-1&quot;&gt;
&lt;p&gt;To install JupyterLab, fire up a terminal and run the following commands:&lt;/p&gt;
&lt;div class=&quot;codeblock mb-3 w-100&quot;&gt;
  &lt;div class=&quot;codeblock__header d-flex justify-content-between codeblock--yellow&quot;&gt;
    &lt;span class=&quot;mr-2 noselect&quot;&gt;Shell&lt;/span&gt;
    
    &lt;div class=&quot;noselect&quot;&gt;
      
        &lt;span class=&quot;codeblock__output-toggle&quot; title=&quot;Toggle prompts and output&quot;&gt;&lt;span class=&quot;icon baseline js-codeblock-output-on codeblock__header--icon-lower&quot;&gt;&lt;/span&gt;&lt;/span&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;div class=&quot;highlight sh highlight--with-header&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jupyterlab_projects
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jupyterlab_projects
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-m&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;venv&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jl_venv
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jl_venv/bin/activate
&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-m&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;pip&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;install&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jupyterlab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    &lt;button class=&quot;codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only&quot; title=&quot;Copy to clipboard&quot;&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt;&lt;/button&gt;
    
      &lt;span class=&quot;small&quot;&gt;&lt;span class=&quot;icon baseline mr-1 text-success&quot;&gt;&lt;/span&gt;Copied!&lt;/span&gt;
    
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To keep things neat, you first create a new &lt;code&gt;jupyterlab_projects&lt;/code&gt; folder for all of your JupyterLab work. Later you can create individual subfolders for each of your projects to keep things organized.&lt;/p&gt;
&lt;p&gt;Next, you create a virtual environment named &lt;code&gt;jl_venv&lt;/code&gt;. You then activate your virtual environment by running its activation script. Once the virtual environment is activated, its name precedes your terminal prompt. You install JupyterLab into this virtual environment.&lt;/p&gt;
&lt;p&gt;Finally, for neatness, you’ll create a new folder named &lt;code&gt;tutorial_project&lt;/code&gt; and then start up JupyterLab from within it:&lt;/p&gt;
&lt;div class=&quot;codeblock mb-3 w-100&quot;&gt;
  &lt;div class=&quot;codeblock__header d-flex justify-content-between codeblock--yellow&quot;&gt;
    &lt;span class=&quot;mr-2 noselect&quot;&gt;Shell&lt;/span&gt;
    
    &lt;div class=&quot;noselect&quot;&gt;
      
        &lt;span class=&quot;codeblock__output-toggle&quot; title=&quot;Toggle prompts and output&quot;&gt;&lt;span class=&quot;icon baseline js-codeblock-output-on codeblock__header--icon-lower&quot;&gt;&lt;/span&gt;&lt;/span&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;div class=&quot;highlight sh highlight--with-header&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;tutorial_project
&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;tutorial_project
&lt;span class=&quot;gp gp-VirtualEnv&quot;&gt;(jl_venv)&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jupyter&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;lab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    &lt;button class=&quot;codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only&quot; title=&quot;Copy to clipboard&quot;&gt;&lt;span class=&quot;icon baseline&quot;&gt;&lt;/span&gt;&lt;/button&gt;
    
      &lt;span class=&quot;small&quot;&gt;&lt;span class=&quot;icon baseline mr-1 text-success&quot;&gt;&lt;/span&gt;Copied!&lt;/span&gt;
    
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Of course, once you’ve finished this tutorial, you can delete &lt;code&gt;tutorial_project&lt;/code&gt; and add in your own project-specific folders instead.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you wish, you could create a &lt;code&gt;Samples&lt;/code&gt; subfolder within &lt;code&gt;tutorial_project&lt;/code&gt; and save this tutorial’s downloadable files into it. These include completed versions of the notebooks that you’ll create later on, as well as some other files. This will also give you some files to play around with and will allow you to fully participate in the tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;JupyterLab will start in your web browser, all ready for you to use. But before you dive in, you might want to know how to end your session:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To shut JupyterLab down, make sure everything is saved, and then use &lt;em&gt;File&lt;/em&gt; → &lt;em&gt;Shut Down&lt;/em&gt; to close the application before closing your browser. This will close everything down cleanly. Closing the browser alone doesn’t close the server, while crashing the server may cause data loss.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To restart, open either Powershell or your terminal, navigate to your &lt;code&gt;jupyterlab_projects&lt;/code&gt; folder, then activate &lt;code&gt;jl_venv&lt;/code&gt;. Finally, create or enter your specific project’s folder then start JupyterLab as before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To deactivate your virtual environment, use the &lt;code&gt;deactivate&lt;/code&gt; command. Your command prompt will return to normal. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you’ve installed and started JupyterLab, its server will start, along with a web browser connection to it. It may take a moment, but soon you’ll be looking at its main interface:&lt;/p&gt;
&lt;a href=&quot;https://files.realpython.com/media/ie-main-interfaceCR.2c7f9ea4195d.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block border &quot; src=&quot;https://files.realpython.com/media/ie-main-interfaceCR.2c7f9ea4195d.png&quot; width=&quot;1923&quot; height=&quot;1031&quot; alt=&quot;main jupyterlab interface&quot; /&gt;&lt;/a&gt;

&lt;p&gt;Because this is your first time running JupyterLab, the front screen shown above contains only a single Launcher window. This is where you can access everything else that’s on offer. &lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Before you start using JupyterLab, you may like to change its appearance to make it easier for you to use. There are several options available to you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can hide or display various screen regions using &lt;em&gt;View&lt;/em&gt; → &lt;em&gt;Appearance&lt;/em&gt;. This is useful if you have a small monitor. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can change the overall theme of the interface by opening &lt;em&gt;Settings&lt;/em&gt; → &lt;em&gt;Theme&lt;/em&gt;. Themes may help you see more clearly. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also increase and decrease various font sizes using the options under &lt;em&gt;Settings&lt;/em&gt; and &lt;em&gt;Settings&lt;/em&gt; → &lt;em&gt;Theme&lt;/em&gt;. These may help clarify text.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can even use your favorite &lt;a href=&quot;https://realpython.com/coding-font/&quot;&gt;coding font&lt;/a&gt; by accessing &lt;em&gt;Settings&lt;/em&gt; → &lt;em&gt;Settings Editor&lt;/em&gt; and then scrolling down the list of settings on the left until you reach &lt;em&gt;Notebook&lt;/em&gt;. Once you’re there, fill out the font family and font size according to your preferences. Then close the &lt;em&gt;Settings&lt;/em&gt; tab:&lt;/p&gt;
&lt;a href=&quot;https://files.realpython.com/media/ie-change-font-family.d646192e919e.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block border &quot; src=&quot;https://files.realpython.com/media/ie-change-font-family.d646192e919e.png&quot; width=&quot;855&quot; height=&quot;709&quot; alt=&quot;changing font size and family&quot; /&gt;&lt;/a&gt;
&lt;p&gt;As you can see from the screenshot, you’ve updated the font within your notebooks. If you don’t like your adjustments, then click the big red &lt;em&gt;Restore to Defaults&lt;/em&gt; button that appears at the top-right of the &lt;em&gt;Settings&lt;/em&gt; screen, and no harm done.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the upcoming sections, you’ll perform a range of tasks highlighting how JupyterLab’s tools enhance the capability of notebooks. You’ll also see some other interesting features as well.&lt;/p&gt;
&lt;h2 id=&quot;understanding-jupyterlab-kernels&quot;&gt;Understanding JupyterLab Kernels&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#understanding-jupyterlab-kernels&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JupyterLab’s tools support you in your work. Although the tools are self-contained, by using some of them together, you get more out of them. This integration is probably JupyterLab’s most powerful feature. &lt;/p&gt;
&lt;p&gt;A good starting point when learning JupyterLab is for you to know what its basic components are and how to make them work together. The diagram below shows an overview of these: &lt;/p&gt;
&lt;a href=&quot;https://files.realpython.com/media/ie-jupyterlab-components.e624b41714b7.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;img-fluid mx-auto d-block border &quot; src=&quot;https://files.realpython.com/media/ie-jupyterlab-components.e624b41714b7.png&quot; width=&quot;1500&quot; height=&quot;1085&quot; alt=&quot;Diagram showing the components of JupyterLab&quot; /&gt;&lt;/a&gt;

&lt;p&gt;This diagram may look overwhelming at first because there are several parts. Don’t worry, you’ll soon see their relevance. The arrows show how various components interact. These interactions are one of the great benefits of JupyterLab. You’ll start with the central part of the application and the diagram: the kernel.&lt;/p&gt;
&lt;/div&gt;&lt;h2&gt;&lt;a href=&quot;https://realpython.com/using-jupyterlab/?utm_source=realpython&amp;utm_medium=rss&quot;&gt;Read the full article at https://realpython.com/using-jupyterlab/ »&lt;/a&gt;&lt;/h2&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 13 Nov 2023 14:00:00 +0000</pubDate>
</item>

</channel>
</rss>
